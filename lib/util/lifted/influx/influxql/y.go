// Code generated by goyacc -o y.go -p yy sql.y. DO NOT EDIT.

//line sql.y:2
// Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package influxql

import __yyfmt__ "fmt"

//line sql.y:16

import (
	"fmt"
	"regexp"
	"sort"
	"strings"
	"time"

	"github.com/openGemini/openGemini/lib/util/lifted/vm/protoparser/influx"
)

const DefaultQueryTimeout = time.Duration(0)

// Some large number, that should be enough for real-life queries,
// but prevents exploiting any lurking odd behaviour in codebase.
const MaxAstDepth = 50000

func setParseTree(yylex interface{}, query Query) {
	yylex.(*YyParser).Query = query
}

func deal_Fill(fill interface{}) (FillOption, interface{}, bool) {
	switch fill.(type) {
	case string:
		switch fill {
		case "null":
			return 0, nil, true
		case "none":
			return 1, nil, true
		case "previous":
			return 3, nil, true
		case "linear":
			return 4, nil, true
		default:
			return -1, nil, false
		}
	case int64:
		return 2, fill.(int64), true
	case float64:
		return 2, fill.(float64), true
	default:
		return -1, nil, false
	}
}

// Function that returns maximum depth of list of nodes, that may be nil.
func maxDepth(nodes ...nodeGuard) int {
	depth := 0
	for _, n := range nodes {
		if n != nil {
			depth = max(depth, n.Depth())
		}
	}
	return depth
}

// Depth-check validator: inspect and either return or raise error.
//
// To be used during construction as either of:
//
//	Obj{... depth: depthCheck(yylex, 1+1+...)}
//	$$.depth = depthCheck(yylex, ...)
//
// or as validator for lists construction as either of
//
//	depthCheck(yylex, len($$))
//	depthCheck(yylex, $$.Depth())
//
// NOTE: While top-level only check (at ALL_QUERIES) is sufficient
// to catch deep trees, check should be done everywhere to protect
// from intermediate large subtree construction!
func depthCheck(yylex interface{}, depth int) int {
	if depth > MaxAstDepth {
		yylex.(*YyParser).Error("AST complexity overflow")
	}
	return depth
}

//line sql.y:93
type yySymType struct {
	yys                 int
	stmt                Statement
	stmts               Statements
	str                 string
	query               Query
	field               *Field
	fields              fieldsList
	sources             sourcesList
	source              Source
	joinType            JoinType
	unionType           UnionType
	sortfs              SortFields
	sortf               *SortField
	ment                *Measurement
	subQuery            *SubQuery
	dimens              dimensionsList
	dimen               *Dimension
	int                 int
	int64               int64
	float64             float64
	dataType            DataType
	expr                Expr
	tdur                time.Duration
	tdurs               []time.Duration
	bool                bool
	groupByCondition    *GroupByCondition
	intSlice            []int
	inter               interface{}
	durations           *Durations
	hints               Hints
	strSlice            []string
	strSlices           [][]string
	location            *time.Location
	indexType           *IndexType
	cqsp                *cqSamplePolicyInfo
	fieldOption         *fieldList
	fieldOptions        []*fieldList
	indexOptions        []*IndexOption
	indexOption         *IndexOption
	databasePolicy      DatabasePolicy
	cmOption            *CreateMeasurementStatementOption
	cte                 *CTE
	ctes                ctesList
	cypherCondition     *CypherCondition
	tableFunctionField  *TableFunctionField
	tableFunctionFields *TableFunctionFields
	tableFunction       *TableFunction
}

const FROM = 57346
const MEASUREMENT = 57347
const INTO = 57348
const ON = 57349
const SELECT = 57350
const WHERE = 57351
const AS = 57352
const GROUP = 57353
const BY = 57354
const ORDER = 57355
const LIMIT = 57356
const OFFSET = 57357
const SLIMIT = 57358
const SOFFSET = 57359
const SHOW = 57360
const CREATE = 57361
const FULL = 57362
const PRIVILEGES = 57363
const OUTER = 57364
const JOIN = 57365
const UNION = 57366
const TO = 57367
const IN = 57368
const NOT = 57369
const NOTIN = 57370
const EXISTS = 57371
const REVOKE = 57372
const FILL = 57373
const DELETE = 57374
const WITH = 57375
const ENGINETYPE = 57376
const COLUMNSTORE = 57377
const TSSTORE = 57378
const ALL = 57379
const ANY = 57380
const PASSWORD = 57381
const NAME = 57382
const REPLICANUM = 57383
const ALTER = 57384
const USER = 57385
const USERS = 57386
const DATABASES = 57387
const DATABASE = 57388
const MEASUREMENTS = 57389
const RETENTION = 57390
const POLICIES = 57391
const POLICY = 57392
const DURATION = 57393
const DEFAULT = 57394
const SHARD = 57395
const INDEX = 57396
const GRANT = 57397
const HOT = 57398
const WARM = 57399
const INDEXCOLD = 57400
const TYPE = 57401
const SET = 57402
const FOR = 57403
const GRANTS = 57404
const REPLICATION = 57405
const SERIES = 57406
const DROP = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const BEGIN = 57412
const END = 57413
const TRUE = 57414
const FALSE = 57415
const TAG = 57416
const ATTRIBUTE = 57417
const FIELD = 57418
const KEYS = 57419
const VALUES = 57420
const KEY = 57421
const EXPLAIN = 57422
const ANALYZE = 57423
const EXACT = 57424
const CARDINALITY = 57425
const SHARDKEY = 57426
const PRIMARYKEY = 57427
const SORTKEY = 57428
const PROPERTY = 57429
const COMPACT = 57430
const SHARDMERGE = 57431
const CONTINUOUS = 57432
const DIAGNOSTICS = 57433
const QUERIES = 57434
const QUERIE = 57435
const SHARDS = 57436
const STATS = 57437
const SUBSCRIPTIONS = 57438
const SUBSCRIPTION = 57439
const GROUPS = 57440
const INDEXTYPE = 57441
const INDEXLIST = 57442
const SEGMENT = 57443
const KILL = 57444
const EVERY = 57445
const RESAMPLE = 57446
const DOWNSAMPLE = 57447
const DOWNSAMPLES = 57448
const SAMPLEINTERVAL = 57449
const TIMEINTERVAL = 57450
const STREAM = 57451
const DELAY = 57452
const STREAMS = 57453
const QUERY = 57454
const PARTITION = 57455
const TOKEN = 57456
const TOKENIZERS = 57457
const MATCH = 57458
const LIKE = 57459
const MATCHPHRASE = 57460
const CONFIG = 57461
const CONFIGS = 57462
const CLUSTER = 57463
const IPINRANGE = 57464
const REPLICAS = 57465
const DETAIL = 57466
const DESTINATIONS = 57467
const SCHEMA = 57468
const INDEXES = 57469
const AUTO = 57470
const EXCEPT = 57471
const INNER = 57472
const LEFT = 57473
const RIGHT = 57474
const GRAPH = 57475
const NODE = 57476
const EDGE = 57477
const TTL = 57478
const RETURN = 57479
const DESC = 57480
const ASC = 57481
const COMMA = 57482
const SEMICOLON = 57483
const LPAREN = 57484
const RPAREN = 57485
const REGEX = 57486
const LBRACKET = 57487
const RBRACKET = 57488
const LSQUARE = 57489
const RSQUARE = 57490
const COLON = 57491
const EQ = 57492
const NEQ = 57493
const LT = 57494
const LTE = 57495
const GT = 57496
const GTE = 57497
const DOT = 57498
const DOUBLECOLON = 57499
const NEQREGEX = 57500
const EQREGEX = 57501
const MULTIHOP = 57502
const IDENT = 57503
const INTEGER = 57504
const DURATIONVAL = 57505
const STRING = 57506
const NUMBER = 57507
const HINT = 57508
const BOUNDPARAM = 57509
const AND = 57510
const OR = 57511
const ADD = 57512
const SUB = 57513
const BITWISE_OR = 57514
const BITWISE_XOR = 57515
const MUL = 57516
const DIV = 57517
const MOD = 57518
const BITWISE_AND = 57519
const UMINUS = 57520

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"MEASUREMENT",
	"INTO",
	"ON",
	"SELECT",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"SLIMIT",
	"SOFFSET",
	"SHOW",
	"CREATE",
	"FULL",
	"PRIVILEGES",
	"OUTER",
	"JOIN",
	"UNION",
	"TO",
	"IN",
	"NOT",
	"NOTIN",
	"EXISTS",
	"REVOKE",
	"FILL",
	"DELETE",
	"WITH",
	"ENGINETYPE",
	"COLUMNSTORE",
	"TSSTORE",
	"ALL",
	"ANY",
	"PASSWORD",
	"NAME",
	"REPLICANUM",
	"ALTER",
	"USER",
	"USERS",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"RETENTION",
	"POLICIES",
	"POLICY",
	"DURATION",
	"DEFAULT",
	"SHARD",
	"INDEX",
	"GRANT",
	"HOT",
	"WARM",
	"INDEXCOLD",
	"TYPE",
	"SET",
	"FOR",
	"GRANTS",
	"REPLICATION",
	"SERIES",
	"DROP",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"BEGIN",
	"END",
	"TRUE",
	"FALSE",
	"TAG",
	"ATTRIBUTE",
	"FIELD",
	"KEYS",
	"VALUES",
	"KEY",
	"EXPLAIN",
	"ANALYZE",
	"EXACT",
	"CARDINALITY",
	"SHARDKEY",
	"PRIMARYKEY",
	"SORTKEY",
	"PROPERTY",
	"COMPACT",
	"SHARDMERGE",
	"CONTINUOUS",
	"DIAGNOSTICS",
	"QUERIES",
	"QUERIE",
	"SHARDS",
	"STATS",
	"SUBSCRIPTIONS",
	"SUBSCRIPTION",
	"GROUPS",
	"INDEXTYPE",
	"INDEXLIST",
	"SEGMENT",
	"KILL",
	"EVERY",
	"RESAMPLE",
	"DOWNSAMPLE",
	"DOWNSAMPLES",
	"SAMPLEINTERVAL",
	"TIMEINTERVAL",
	"STREAM",
	"DELAY",
	"STREAMS",
	"QUERY",
	"PARTITION",
	"TOKEN",
	"TOKENIZERS",
	"MATCH",
	"LIKE",
	"MATCHPHRASE",
	"CONFIG",
	"CONFIGS",
	"CLUSTER",
	"IPINRANGE",
	"REPLICAS",
	"DETAIL",
	"DESTINATIONS",
	"SCHEMA",
	"INDEXES",
	"AUTO",
	"EXCEPT",
	"INNER",
	"LEFT",
	"RIGHT",
	"GRAPH",
	"NODE",
	"EDGE",
	"TTL",
	"RETURN",
	"DESC",
	"ASC",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"REGEX",
	"LBRACKET",
	"RBRACKET",
	"LSQUARE",
	"RSQUARE",
	"COLON",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"DOT",
	"DOUBLECOLON",
	"NEQREGEX",
	"EQREGEX",
	"MULTIHOP",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"NUMBER",
	"HINT",
	"BOUNDPARAM",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"BITWISE_OR",
	"BITWISE_XOR",
	"MUL",
	"DIV",
	"MOD",
	"BITWISE_AND",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4143

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 60,
	24, 67,
	-2, 61,
	-1, 71,
	24, 66,
	-2, 64,
	-1, 151,
	4, 117,
	-2, 176,
	-1, 529,
	117, 192,
	150, 192,
	151, 192,
	152, 192,
	153, 192,
	154, 192,
	155, 192,
	158, 192,
	159, 192,
	-2, 182,
}

const yyPrivate = 57344

const yyLast = 1378

var yyAct = [...]int16{
	1072, 1069, 683, 998, 1035, 567, 963, 936, 851, 470,
	987, 870, 819, 401, 566, 789, 770, 880, 679, 774,
	918, 853, 4, 701, 706, 612, 550, 682, 436, 157,
	340, 849, 613, 468, 60, 721, 59, 561, 524, 681,
	247, 151, 341, 491, 246, 330, 327, 229, 287, 145,
	206, 71, 234, 153, 418, 230, 976, 76, 1050, 161,
	168, 1023, 269, 1084, 977, 166, 167, 278, 279, 283,
	280, 276, 277, 281, 282, 146, 555, 1082, 691, 130,
	74, 278, 279, 283, 280, 276, 277, 281, 282, 365,
	366, 140, 276, 277, 281, 282, 170, 881, 882, 1068,
	1070, 883, 365, 366, 702, 72, 748, 884, 150, 703,
	149, 365, 366, 684, 787, 155, 148, 747, 212, 213,
	689, 529, 1001, 943, 365, 366, 685, 147, 1046, 224,
	148, 226, 672, 237, 626, 156, 423, 170, 161, 365,
	366, 295, 275, 999, 166, 167, 365, 366, 1030, 73,
	147, 170, 1048, 148, 162, 164, 160, 165, 163, 1011,
	169, 633, 258, 205, 158, 203, 235, 154, 236, 676,
	677, 207, 526, 208, 161, 525, 365, 366, 1003, 265,
	166, 167, 408, 996, 961, 409, 967, 249, 78, 932,
	170, 170, 208, 155, 273, 208, 264, 284, 216, 285,
	928, 324, 262, 205, 927, 77, 887, 637, 204, 227,
	207, 207, 855, 866, 658, 846, 170, 755, 962, 278,
	279, 283, 280, 276, 277, 281, 282, 724, 754, 753,
	752, 270, 751, 162, 164, 160, 165, 163, 750, 169,
	368, 342, 608, 158, 605, 606, 154, 322, 147, 855,
	156, 148, 170, 959, 957, 208, 298, 944, 147, 674,
	303, 148, 675, 397, 170, 805, 146, 804, 624, 162,
	164, 160, 165, 163, 152, 169, 496, 622, 611, 158,
	367, 495, 154, 426, 207, 427, 609, 593, 483, 421,
	562, 563, 592, 137, 135, 346, 261, 854, 565, 564,
	219, 399, 278, 279, 283, 280, 276, 277, 281, 282,
	458, 315, 155, 398, 172, 457, 314, 410, 411, 412,
	413, 414, 415, 416, 417, 403, 176, 265, 404, 1078,
	155, 422, 441, 208, 858, 419, 405, 1076, 494, 1074,
	1064, 1062, 1060, 1058, 264, 460, 1039, 161, 505, 1038,
	429, 722, 723, 166, 167, 510, 511, 964, 937, 726,
	725, 1012, 799, 958, 821, 614, 527, 528, 707, 877,
	425, 343, 843, 467, 532, 533, 534, 623, 842, 834,
	802, 792, 440, 791, 737, 444, 446, 497, 449, 235,
	235, 736, 695, 694, 383, 671, 669, 208, 668, 666,
	504, 465, 512, 513, 664, 208, 649, 648, 647, 641,
	180, 639, 625, 610, 595, 208, 208, 138, 136, 535,
	560, 545, 544, 156, 541, 170, 540, 375, 376, 377,
	378, 379, 380, 558, 559, 382, 381, 522, 735, 521,
	507, 439, 162, 164, 160, 165, 163, 573, 169, 428,
	396, 395, 158, 394, 391, 154, 390, 389, 577, 386,
	384, 554, 351, 350, 369, 370, 597, 349, 347, 572,
	339, 338, 337, 332, 325, 579, 323, 319, 583, 604,
	549, 300, 260, 220, 218, 214, 202, 200, 596, 173,
	1043, 289, 797, 646, 500, 494, 274, 634, 650, 635,
	364, 594, 509, 607, 299, 291, 290, 498, 501, 305,
	306, 456, 308, 309, 336, 348, 316, 336, 1049, 1041,
	321, 914, 575, 576, 645, 578, 913, 763, 582, 621,
	342, 640, 548, 342, 547, 591, 630, 663, 466, 296,
	890, 1031, 600, 602, 603, 979, 643, 636, 692, 638,
	170, 673, 1019, 657, 1079, 1047, 1065, 208, 1052, 208,
	1021, 161, 1019, 678, 665, 1018, 941, 166, 167, 940,
	503, 155, 656, 930, 1020, 1005, 1002, 367, 709, 74,
	289, 74, 74, 713, 271, 715, 995, 872, 271, 711,
	712, 780, 687, 704, 291, 290, 690, 503, 719, 950,
	768, 938, 738, 74, 72, 734, 876, 714, 922, 708,
	746, 718, 686, 686, 742, 655, 744, 745, 654, 875,
	631, 271, 129, 632, 556, 696, 697, 503, 72, 874,
	502, 442, 873, 688, 447, 781, 268, 156, 453, 170,
	455, 693, 267, 210, 1077, 462, 1073, 463, 773, 1063,
	925, 1059, 778, 777, 710, 1051, 162, 164, 160, 165,
	163, 1037, 169, 784, 785, 786, 158, 772, 975, 732,
	733, 971, 823, 798, 795, 769, 139, 659, 740, 741,
	530, 743, 783, 289, 434, 73, 765, 78, 373, 78,
	78, 372, 801, 150, 779, 149, 208, 371, 788, 284,
	155, 782, 800, 335, 77, 793, 77, 77, 794, 790,
	79, 78, 272, 73, 263, 73, 73, 811, 812, 1040,
	813, 991, 803, 934, 810, 749, 272, 900, 77, 132,
	808, 809, 990, 816, 807, 551, 822, 73, 796, 662,
	833, 215, 661, 660, 354, 651, 831, 832, 838, 1055,
	840, 841, 869, 815, 836, 837, 817, 839, 356, 331,
	361, 358, 432, 433, 328, 178, 829, 175, 484, 221,
	209, 857, 141, 143, 868, 1029, 931, 871, 211, 586,
	847, 589, 844, 863, 767, 762, 824, 825, 598, 356,
	749, 361, 358, 856, 923, 922, 760, 195, 225, 342,
	865, 818, 919, 302, 196, 331, 1033, 1015, 329, 879,
	1027, 830, 878, 994, 850, 178, 895, 461, 891, 835,
	538, 317, 318, 454, 885, 862, 3, 889, 178, 452,
	893, 320, 894, 312, 313, 304, 901, 907, 908, 192,
	193, 902, 910, 911, 906, 912, 271, 899, 307, 909,
	896, 189, 142, 190, 329, 828, 848, 686, 827, 814,
	271, 730, 720, 903, 904, 185, 186, 187, 357, 359,
	360, 717, 585, 112, 921, 764, 920, 924, 406, 888,
	407, 929, 177, 183, 926, 485, 886, 331, 968, 933,
	310, 311, 400, 184, 861, 897, 288, 898, 420, 357,
	359, 360, 939, 181, 182, 948, 174, 935, 942, 905,
	288, 111, 955, 949, 109, 956, 110, 915, 969, 954,
	477, 480, 259, 478, 479, 481, 946, 947, 443, 445,
	965, 448, 450, 191, 960, 790, 871, 973, 951, 459,
	966, 161, 845, 771, 464, 972, 757, 166, 167, 620,
	974, 619, 981, 982, 618, 617, 482, 616, 113, 615,
	986, 248, 217, 201, 179, 116, 984, 985, 134, 988,
	557, 978, 431, 114, 980, 487, 945, 115, 775, 776,
	294, 131, 1000, 952, 953, 629, 1006, 997, 860, 859,
	1008, 1009, 131, 1004, 131, 131, 132, 1007, 988, 1010,
	970, 1016, 864, 826, 1017, 293, 758, 729, 716, 642,
	728, 133, 1022, 1024, 584, 490, 438, 536, 90, 170,
	297, 588, 1028, 581, 451, 385, 333, 680, 553, 1075,
	1036, 983, 1061, 531, 250, 387, 162, 164, 160, 165,
	163, 1042, 169, 1036, 1045, 1044, 158, 104, 251, 667,
	542, 539, 252, 388, 171, 1056, 653, 85, 80, 652,
	81, 82, 518, 519, 520, 574, 92, 1067, 516, 517,
	580, 515, 514, 917, 916, 89, 587, 83, 590, 256,
	892, 1081, 254, 806, 1083, 599, 601, 86, 570, 88,
	699, 700, 1071, 568, 569, 131, 255, 103, 100, 101,
	102, 107, 437, 93, 437, 96, 1057, 91, 552, 97,
	430, 402, 131, 363, 362, 266, 1080, 132, 344, 94,
	1066, 161, 1054, 132, 95, 199, 644, 166, 167, 393,
	74, 178, 392, 98, 99, 161, 537, 508, 506, 105,
	106, 166, 167, 499, 486, 353, 352, 345, 301, 473,
	474, 161, 257, 253, 223, 72, 222, 166, 167, 198,
	471, 475, 477, 480, 197, 478, 479, 481, 571, 435,
	670, 241, 472, 242, 108, 131, 546, 243, 543, 84,
	194, 188, 233, 523, 1053, 241, 144, 242, 161, 628,
	627, 243, 489, 476, 166, 167, 488, 239, 482, 170,
	493, 241, 492, 242, 867, 989, 766, 243, 761, 727,
	759, 239, 731, 170, 852, 1025, 240, 164, 160, 165,
	163, 739, 169, 1026, 1034, 1013, 158, 239, 992, 170,
	240, 164, 160, 165, 163, 1014, 169, 993, 78, 1032,
	158, 87, 820, 74, 469, 698, 240, 164, 160, 165,
	163, 705, 169, 61, 62, 77, 158, 424, 374, 286,
	122, 159, 245, 244, 658, 67, 170, 64, 72, 238,
	292, 355, 232, 231, 228, 2, 1, 65, 75, 55,
	54, 53, 58, 162, 164, 160, 165, 163, 57, 169,
	66, 56, 127, 158, 52, 69, 51, 50, 120, 334,
	63, 117, 49, 119, 48, 47, 46, 45, 121, 44,
	43, 42, 41, 40, 39, 68, 38, 37, 36, 118,
	35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
	25, 24, 21, 20, 22, 19, 23, 70, 18, 17,
	16, 14, 15, 13, 12, 123, 756, 7, 11, 10,
	9, 78, 128, 8, 326, 6, 5, 0, 0, 0,
	124, 125, 0, 0, 126, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 73,
}

var yyPact = [...]int16{
	1235, -1000, 569, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1013, 868, 1255, 1108, 963, 257, 256, 595, 733,
	661, -1000, -11, 571, 108, -1000, 1030, 152, 328, 1235,
	643, 758, 915, 821, 819, -1000, 788, 1177, 774, 872,
	757, 1176, 699, 712, 1157, 1152, -1000, -1000, -1000, 1116,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 326,
	913, 325, 47, 658, 636, -11, -11, 324, 1108, 912,
	323, 138, 322, 657, 1149, 1147, -11, 702, -11, 1114,
	-1000, 7, 1085, 911, 47, 1027, 1146, 1075, 1145, 571,
	-1000, 861, 321, 134, 574, -1000, 1105, -1000, -1000, 499,
	493, 720, 281, -1000, 339, 132, 495, -1000, 495, -1000,
	-1000, 843, 349, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 968, -23, 389, -1000, -1000, 987, 1124, 320, 1141,
	1108, 752, 1124, 1124, 770, 1124, 808, 751, 155, 1124,
	739, 316, 748, 1124, 47, -1000, -1000, 315, -11, 313,
	731, 312, 993, 561, 361, 311, -1000, -1000, -1000, 310,
	309, 210, 1112, 1140, -1000, 1114, -1000, 307, -1000, -1000,
	359, 306, 302, 301, -1000, 1139, 1138, -1000, 604, 769,
	1104, -1000, -1000, -1000, -1000, 1103, 358, -79, -1000, 1085,
	438, 555, 549, 546, -1000, -1000, 277, -103, 299, 992,
	298, 1028, 296, 295, 293, 1125, 292, 290, -1000, 289,
	-11, -1000, 1030, -11, -1000, -1000, 543, -1000, -1000, 1171,
	1100, 281, 47, 706, 804, 21, 495, 495, 495, 495,
	495, 495, 495, 495, -89, -1000, 829, -1000, 1085, -7,
	209, 288, 573, 1098, 932, 628, 542, 1164, 1089, 983,
	-1000, 280, 1114, 1089, 1124, 1108, 1108, 1124, 1108, 991,
	746, 1124, 740, 1124, 355, 154, 1091, 734, 1124, -1000,
	1124, 1108, -1000, -1000, -1000, 388, 685, -1000, 1109, 126,
	645, 810, 1137, 936, 982, -11, 120, 351, 1136, 352,
	487, -1000, -1000, 541, 47, -11, -1000, 1131, 279, 1130,
	346, -1000, -11, -11, 7, 7, 1049, 1048, -1000, 1046,
	1040, 1041, 278, 276, 11, 1085, 1085, -89, -22, 538,
	1007, -11, -11, -11, 875, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1129, 736, 1026, 265, 263, -1000,
	1025, 1174, 261, 260, -1000, 1172, 384, 382, -1000, -1000,
	1114, 606, 1096, -1000, -1000, 1171, -1000, -1000, -1000, -1000,
	-1000, -1000, -82, -82, -82, -1000, -1000, -82, -1000, -1000,
	495, 8, 481, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	930, -1000, 1085, 1085, 259, 140, 1079, 1076, 1163, -1000,
	1089, 1079, 1108, 1114, 1100, 1114, 1089, 990, 1114, 1089,
	981, 793, 1124, 988, 1124, 1108, 131, 345, 253, 1089,
	1079, 1124, 1108, 1108, 1114, 1100, 83, -1000, -1000, 1109,
	-1000, 79, 124, 252, 116, -1000, 204, 908, 906, 904,
	903, 900, 898, 813, 115, 216, 251, -30, -1000, -1000,
	951, -1000, -11, 480, 87, 343, 46, -1000, 46, 250,
	210, 248, 976, 210, 1119, 368, 247, -1000, 246, 245,
	-1000, 342, 769, 738, -1000, -1000, 1036, -1000, 1033, -1000,
	-1000, -1000, -1000, 475, -1000, -1000, -1000, -1000, -1000, -1000,
	72, 535, 603, 602, 599, -1000, 1085, 243, 204, 238,
	1024, -1000, 237, 235, 1166, -1000, 234, -32, 97, 1100,
	996, -48, -48, 1114, 49, 495, -1000, -1000, -57, -79,
	403, 1114, 232, 231, 406, 406, -1000, 1074, -58, -58,
	207, 140, 1079, -1000, 1114, 1100, 1100, 1079, 1089, 1079,
	975, 792, 1089, 1079, 783, 201, 977, 974, 782, 1108,
	1114, 1100, 282, 230, 223, -1000, 1079, -1000, 1108, 1114,
	1100, 1114, 1100, 1100, 1079, -51, -62, -1000, -1000, -1000,
	-1000, -1000, 585, -1000, -1000, 75, 69, 67, 66, 65,
	54, -1000, -1000, -1000, -1000, 895, 973, 697, 686, 377,
	-1000, -1000, -1000, -1000, 799, 46, -1000, -1000, -1000, 680,
	457, 533, 892, -1000, 571, -11, 941, -1000, -1000, -1000,
	-11, 1085, -1000, -1000, -1000, 11, 448, 492, 1122, 72,
	-11, -11, -11, -29, 1109, 650, -1000, 222, -1000, -1000,
	220, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 606, 1089,
	532, 598, -1000, 335, 531, 205, -1000, 598, 1100, -1000,
	-103, 1085, 219, 1089, -1000, -1000, -1000, -1000, -1000, 105,
	103, 1068, -1000, -1000, -1000, 594, -1000, 592, -1000, -1000,
	1100, 1079, 1079, -1000, 1079, -1000, 780, 201, 1079, -1000,
	201, 1114, 203, 203, 530, 406, 406, 970, 779, 776,
	201, 1114, 1100, 1100, 1079, 218, -1000, -1000, -1000, 1114,
	1100, 1100, 1079, 1100, 1079, 1079, -1000, 217, 211, 204,
	-1000, -1000, -1000, -1000, -1000, -1000, 890, 52, 743, 730,
	136, 730, 173, 953, -1000, -1000, 824, 722, 969, 210,
	-1000, 50, 664, 627, -11, -1000, -1000, -1000, -79, -1000,
	-1000, -1000, 444, 489, 486, 476, 463, -1000, -1000, -1000,
	208, -1000, -1000, 996, 1079, -64, -48, 812, 43, 805,
	606, -79, 391, 1079, 1063, -1000, -58, 207, -1000, -1000,
	1079, -1000, -1000, -1000, 201, 1114, -1000, 1114, 1089, -1000,
	587, -1000, -1000, 203, -1000, -1000, 762, 201, 201, 1114,
	1100, 1079, 1079, -1000, -1000, 1100, 1079, 1079, -1000, 1079,
	-1000, -1000, 376, 371, -1000, -1000, 854, 1053, 1052, 708,
	204, -1000, 136, -1000, 695, 694, 708, -1000, 508, -1000,
	-1000, 571, 41, 37, 892, 430, 669, -1000, 26, 941,
	583, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1089, 197,
	458, -1000, -1000, -1000, -64, -1000, -1000, 426, -1000, 996,
	-41, -1000, 95, -1000, -1000, -1000, 1114, 1089, 1089, 1079,
	203, 456, 201, 1114, 1114, 1100, 1079, -1000, -1000, 1079,
	-1000, -1000, -1000, 92, 202, 91, -1000, -1000, 876, 56,
	585, -1000, 196, 196, 876, 23, 817, 857, -1000, -1000,
	967, 529, -1000, -11, -11, 1079, -1000, 526, -1000, -1000,
	-1000, -107, 1089, 399, -1000, 1089, 1079, 1079, -1000, -1000,
	-1000, 1114, 1100, 1100, 1079, -1000, -1000, -1000, -1000, 867,
	596, -1000, -1000, 581, -1000, 581, 728, 443, -1000, 20,
	892, -20, 583, -1000, 197, -42, 433, 15, 1079, 432,
	1079, -1000, -1000, 1100, 1079, 1079, -1000, -1000, 867, -1000,
	-4, 200, 721, -1000, 196, 136, -1000, -1000, 422, -1000,
	-1000, 431, -1000, 417, 197, -110, -1000, 1079, -1000, -1000,
	-1000, -1000, -1000, 723, -1000, 196, 581, -1000, 667, -15,
	-1000, -1000, -1000, 394, -1000, 718, -1000, -11, 581, 519,
	-1000, 188, -1000, 185, 579, -1000, 369, -20, 330, -1000,
	-11, -34, 412, -10, -1000, -1000, -1000, -1000, 370, -113,
	513, 415, 1113, 612, 1069, 182, -79, 509, -1000, 181,
	1006, 180, 507, 179, 413, 1111, 1085, -44, -68, -1000,
	1055, 504, -79, 178, 1003, 176, 502, 168, 411, 1107,
	1085, -66, -105, -1000, 1085,
}

var yyPgo = [...]int16{
	0, 826, 1356, 1355, 1354, 1353, 22, 36, 34, 57,
	51, 1350, 1349, 1348, 1347, 1346, 1344, 1343, 1342, 1341,
	1340, 1339, 1338, 1336, 1335, 1334, 1333, 1332, 1331, 1330,
	1329, 35, 1328, 1327, 1326, 1325, 1324, 1323, 1322, 1321,
	1320, 1318, 1317, 1316, 1314, 1313, 1312, 1311, 1310, 1309,
	16, 1307, 1306, 1305, 1304, 1302, 1299, 1297, 1296, 1294,
	1291, 1288, 1282, 1281, 1280, 1279, 1278, 41, 30, 53,
	42, 1276, 1275, 622, 1274, 47, 1273, 62, 1272, 1271,
	1270, 50, 55, 52, 37, 79, 1269, 1263, 0, 1262,
	1261, 40, 29, 44, 12, 48, 1259, 1, 1258, 1257,
	1251, 28, 24, 13, 26, 39, 27, 14, 5, 1245,
	18, 17, 10, 9, 1244, 33, 60, 1242, 326, 15,
	32, 2, 1241, 19, 1239, 25, 31, 6, 1237, 1235,
	11, 1228, 1225, 1224, 4, 1223, 1215, 7, 21, 8,
	1214, 1210, 1208, 1206, 1205, 1204, 3, 23, 20, 45,
	1202, 1200, 43, 46, 1196, 1192, 1190, 1189, 1186, 49,
	1184, 38, 1183, 1182,
}

var yyR1 = [...]uint8{
	0, 71, 72, 72, 72, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 7, 7, 9, 9, 10, 10,
	10, 10, 10, 80, 80, 80, 80, 66, 66, 66,
	66, 66, 66, 160, 160, 160, 160, 97, 97, 67,
	67, 69, 69, 69, 69, 69, 69, 96, 96, 95,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 92, 92, 77, 77, 73, 74,
	74, 75, 75, 75, 75, 75, 163, 162, 162, 161,
	161, 79, 79, 79, 79, 79, 79, 79, 79, 78,
	76, 76, 82, 83, 83, 83, 83, 83, 81, 81,
	81, 103, 103, 104, 104, 105, 105, 121, 121, 106,
	106, 106, 106, 106, 106, 106, 106, 137, 137, 110,
	110, 111, 111, 111, 111, 85, 85, 87, 87, 86,
	86, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	89, 93, 93, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 116, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 99, 99, 99, 101, 101, 100, 100,
	102, 102, 102, 107, 147, 147, 108, 108, 108, 108,
	109, 109, 109, 109, 2, 2, 3, 3, 153, 153,
	153, 153, 153, 149, 149, 4, 115, 115, 114, 114,
	114, 114, 114, 114, 114, 11, 11, 12, 12, 84,
	84, 84, 84, 13, 13, 14, 14, 5, 5, 5,
	15, 15, 112, 112, 113, 113, 113, 113, 113, 113,
	16, 16, 16, 16, 17, 19, 18, 18, 20, 20,
	21, 22, 24, 24, 24, 26, 26, 25, 25, 25,
	27, 27, 23, 28, 28, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 57, 57, 57, 57, 57, 118,
	118, 29, 29, 30, 30, 30, 30, 31, 31, 31,
	31, 31, 94, 94, 117, 32, 32, 33, 33, 33,
	33, 34, 34, 34, 34, 35, 35, 35, 35, 36,
	36, 154, 154, 155, 141, 141, 142, 142, 142, 126,
	126, 144, 144, 148, 148, 148, 156, 156, 157, 131,
	131, 132, 132, 136, 136, 124, 124, 56, 56, 152,
	152, 150, 150, 151, 151, 151, 139, 139, 140, 140,
	138, 138, 127, 127, 119, 119, 128, 129, 135, 135,
	133, 133, 134, 134, 125, 125, 120, 37, 38, 39,
	40, 40, 40, 40, 41, 41, 41, 41, 42, 42,
	43, 43, 44, 45, 45, 46, 143, 143, 143, 143,
	47, 48, 49, 49, 49, 68, 68, 70, 51, 51,
	51, 51, 52, 52, 50, 146, 146, 53, 145, 145,
	54, 54, 55, 58, 59, 130, 130, 123, 123, 63,
	63, 64, 65, 65, 65, 65, 60, 61, 61, 61,
	61, 61, 62, 62, 62, 62, 62, 158, 158, 159,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 11, 12,
	9, 1, 4, 0, 1, 2, 3, 7, 5, 5,
	3, 1, 23, 2, 13, 25, 0, 0, 2, 1,
	3, 1, 3, 3, 1, 3, 3, 1, 2, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 5, 4, 3, 2, 0, 2, 1,
	3, 1, 3, 1, 1, 1, 4, 1, 3, 1,
	1, 2, 2, 1, 3, 2, 3, 2, 2, 5,
	3, 1, 1, 5, 4, 4, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 1, 3, 1, 1, 1,
	3, 4, 6, 7, 1, 3, 1, 4, 0, 4,
	0, 1, 1, 1, 2, 2, 0, 1, 3, 1,
	3, 1, 3, 5, 6, 5, 6, 6, 6, 6,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 3, 0, 1, 3,
	1, 2, 2, 2, 1, 1, 4, 2, 2, 0,
	4, 2, 2, 0, 2, 3, 5, 4, 2, 1,
	3, 3, 0, 3, 3, 2, 1, 2, 1, 2,
	2, 2, 2, 1, 2, 9, 6, 7, 4, 2,
	2, 2, 2, 5, 3, 7, 8, 6, 9, 9,
	5, 4, 1, 2, 3, 3, 3, 3, 3, 3,
	7, 6, 8, 7, 2, 3, 4, 3, 3, 2,
	7, 6, 6, 7, 6, 5, 4, 6, 7, 6,
	5, 4, 3, 8, 7, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 8, 7, 7, 6, 2,
	0, 7, 6, 11, 10, 12, 11, 2, 2, 4,
	2, 2, 1, 3, 1, 3, 2, 10, 9, 9,
	8, 13, 12, 12, 11, 10, 9, 9, 8, 5,
	5, 0, 7, 10, 0, 2, 0, 2, 6, 0,
	2, 0, 2, 0, 2, 2, 0, 3, 3, 0,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	1, 2, 2, 2, 3, 2, 0, 1, 1, 2,
	3, 3, 1, 3, 2, 0, 2, 2, 2, 1,
	3, 1, 3, 3, 1, 3, 1, 3, 6, 4,
	9, 8, 8, 7, 9, 8, 8, 7, 2, 4,
	7, 3, 3, 3, 5, 10, 3, 3, 5, 0,
	3, 6, 9, 11, 7, 1, 3, 1, 4, 6,
	2, 4, 2, 4, 10, 1, 3, 8, 0, 2,
	2, 4, 3, 2, 3, 1, 3, 1, 1, 10,
	8, 2, 3, 5, 7, 5, 2, 6, 6, 6,
	6, 6, 2, 6, 6, 10, 10, 1, 3, 3,
}

var yyChk = [...]int16{
	-1000, -71, -72, -1, -6, -2, -3, -14, -5, -11,
	-12, -13, -16, -17, -19, -18, -20, -21, -22, -24,
	-26, -27, -25, -23, -28, -29, -30, -32, -33, -34,
	-35, -36, -37, -38, -39, -40, -41, -42, -43, -44,
	-45, -46, -47, -48, -49, -51, -52, -53, -54, -55,
	-57, -58, -59, -63, -64, -65, -60, -61, -62, -7,
	-8, 18, 19, 65, 32, 42, 55, 30, 80, 60,
	102, -10, 33, 142, 8, -66, -9, 133, 116, 141,
	45, 47, 48, 64, 166, 44, 74, -122, 76, 62,
	5, 94, 53, 90, 106, 111, 92, 96, 120, 121,
	85, 86, 87, 84, 34, 126, 127, 88, 161, 46,
	48, 43, 5, 90, 105, 109, 97, 46, 64, 48,
	43, 53, 5, 90, 105, 106, 109, 37, 97, -73,
	-85, 4, 9, 48, 5, 37, 161, 37, 161, 81,
	-6, 39, 119, 112, -158, -159, -121, 161, 164, -7,
	-8, -67, 166, -69, 174, -91, 142, -92, 171, -90,
	163, 66, 161, 165, 162, 164, 72, 73, -116, 167,
	144, 24, 162, 161, -1, 124, -118, 124, 7, 49,
	-118, 82, 83, 64, 74, 77, 78, 79, 4, 77,
	79, 61, 82, 83, 4, 98, 92, 7, 7, 9,
	161, 50, 161, -83, 161, 156, -81, 164, -116, 112,
	7, 142, -121, -121, 161, -73, -85, 50, 161, 162,
	161, 112, 7, 7, -121, 96, -121, -85, -74, -75,
	-82, -76, -78, -163, -83, -8, 161, -88, -86, 142,
	161, 116, 118, 122, -87, -89, -93, -91, 50, -83,
	7, 21, 25, 7, 7, 21, 4, 7, -6, 61,
	161, 162, -9, 140, -10, -8, 10, 143, 143, -77,
	-85, 140, 6, -67, 157, 10, 174, 175, 170, 171,
	173, 176, 177, 172, -91, -91, -96, -95, 67, 142,
	157, 156, -80, 37, 12, 164, 150, 33, -85, -118,
	161, 7, -73, -85, 83, -118, -118, 78, -118, -118,
	82, 83, 82, 83, 161, 156, -118, 82, 83, 161,
	83, -118, -83, 161, -121, 161, -4, -153, 33, 123,
	-149, 74, 161, 33, -56, 142, 156, 161, 161, 161,
	-68, -70, -92, 161, 6, 7, -85, 161, 156, 161,
	161, 161, 7, 7, 140, -79, 20, 130, 23, 131,
	132, 22, 10, 10, 142, 168, 169, -91, -88, 26,
	27, 142, 142, 142, -98, 150, 151, 152, 153, 154,
	155, 159, 158, 117, 161, 33, 161, 7, 25, 161,
	161, 161, 7, 4, 161, 161, 161, -121, -159, -8,
	-73, -103, 11, -69, -82, -77, 74, 76, 161, 164,
	-91, -91, -91, -91, -91, -91, -91, -91, 143, -95,
	69, -88, -67, 143, -99, 161, 74, 76, 161, -9,
	12, 40, 134, 135, 142, 5, -101, 13, 33, 161,
	-85, -101, -118, -73, -85, -73, -85, -118, -73, -85,
	-73, 33, 83, -118, 83, -118, 156, 161, 156, -73,
	-101, 83, -118, -118, -73, -85, 150, -153, -115, -114,
	-113, 51, 63, 40, 41, 52, 84, 53, 56, 57,
	54, 58, 89, 162, 123, 75, 7, 39, -154, -155,
	33, -152, -150, -151, -121, 161, 156, -81, 156, 7,
	142, 156, 143, 140, -82, -121, 7, 161, 7, 156,
	-121, -121, -75, -75, 23, 23, 22, 23, 22, 23,
	23, 161, 161, -162, -161, 164, 161, -88, -88, 143,
	142, 26, -121, -121, -121, -93, 142, 7, 84, 25,
	161, 161, 25, 4, 161, 161, 4, 150, 150, -85,
	-104, 129, 12, -73, -91, 68, 143, 40, -88, -88,
	161, -84, 150, 151, 159, 158, -107, -108, 14, 15,
	12, 5, -101, -108, -73, -85, -85, -103, -85, -101,
	-73, 33, -85, -101, 33, 79, -118, -73, 33, -118,
	-73, -85, 161, 156, 156, 161, -101, -108, -118, -73,
	-85, -73, -85, -85, -103, 161, 162, -115, 163, 162,
	161, 162, -125, -120, 161, 51, 51, 51, 51, 51,
	51, -149, 162, 161, 52, 161, 164, -156, -157, 34,
	-152, 140, 143, 74, -121, 156, -81, 161, -81, 161,
	-68, 161, 33, -70, 7, 156, 125, 161, 161, 161,
	156, 7, 23, 23, 143, 140, -67, -6, 142, 142,
	140, 140, 140, -88, 161, -125, 161, 25, 161, 161,
	4, 161, 164, -121, 162, 165, 72, 73, -103, -110,
	31, -105, -106, -121, 161, 174, -116, -105, -85, 71,
	-91, 135, 145, -85, 161, 161, -116, -116, -109, 16,
	17, -147, 162, 167, -147, -100, -102, 161, -84, -108,
	-85, -103, -103, -108, -101, -108, 33, 79, -101, -107,
	79, -31, 150, 151, 26, 159, 158, -73, 33, 33,
	79, -73, -85, -85, -103, 156, 161, 161, -108, -73,
	-85, -85, -103, -85, -103, -103, -108, 168, 168, 140,
	163, 163, 163, 163, 163, 163, -15, 51, 33, -141,
	99, -142, 99, 150, 76, -81, -143, 104, 143, 142,
	-50, 51, -6, -121, -123, 37, 38, -121, -88, -161,
	143, 143, -67, -6, -121, -121, -121, 143, -115, -119,
	59, 161, 161, -104, -101, 142, 140, 157, 142, 157,
	-103, -88, 161, -101, 162, 162, 15, 140, 138, 139,
	-103, -108, -108, -108, 79, -31, -107, -31, -85, -94,
	-117, 161, -94, 142, -116, -116, 33, 79, 79, -31,
	-85, -103, -103, -108, 161, -85, -103, -103, -108, -103,
	-108, -108, 161, 161, -120, 52, 163, 37, 113, -126,
	84, -139, -140, -138, 161, 76, -126, -139, 161, 36,
	35, 70, 103, 61, 33, -68, 163, -145, 110, 125,
	-130, -121, 143, 143, 143, 143, 143, 161, -110, -107,
	-111, 161, 162, 165, 171, -106, 74, 163, 74, -104,
	149, -107, 17, -147, -102, -108, -31, -85, -85, -101,
	140, -94, 79, -31, -31, -85, -103, -108, -108, -103,
	-108, -108, -108, 150, 150, 63, 21, 21, -148, 94,
	-125, -138, 100, 100, -148, 142, -6, 163, 163, -50,
	143, 107, 163, -123, 140, -101, -137, 161, 143, -111,
	143, 140, -110, 164, 162, -85, -101, -101, -108, -94,
	143, -31, -85, -85, -103, -108, -108, 162, 161, 162,
	-119, 128, 162, -127, 161, -127, -119, 163, 71, 61,
	33, 142, -130, -121, -107, 142, 163, 171, -101, 146,
	-101, -108, -108, -85, -103, -103, -108, -112, -113, -144,
	136, 140, -131, -128, 85, 143, 163, -50, -146, 163,
	-137, 164, 143, 163, -107, 143, -108, -103, -108, -108,
	-112, 163, 161, -132, -129, 86, -127, -139, 143, 140,
	143, 143, -137, 171, -108, -136, -135, 87, -127, 108,
	163, 147, -124, 88, -133, -134, -121, 142, 161, 161,
	140, 150, -146, 160, -134, -121, 162, 143, 162, 148,
	171, 142, 143, -160, 9, 137, -88, 37, 161, 142,
	161, 26, 161, 142, 161, 143, 9, -88, 143, -97,
	168, 37, -88, 142, 161, 26, 161, 142, 161, 143,
	9, -88, 143, -97, 168,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	-2, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 71, 0, 81, 0, 3,
	234, 320, 0, 320, 0, 284, 0, 0, 0, 0,
	0, 418, 0, 0, 442, 450, 453, 461, 466, 472,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 0, 176,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 0, 0, 477, 0, 157, 158, 0,
	67, -2, 0, 89, 91, 94, 0, 109, 0, 111,
	112, 0, 203, 205, 206, 207, 208, 209, 210, 212,
	202, 73, 0, 0, 4, 235, 176, 320, 0, 264,
	176, 0, 320, 320, 0, 320, 320, 0, 0, 320,
	0, 0, 0, 320, 0, 422, 430, 0, 0, 0,
	242, 0, 0, 378, 148, 0, 147, 149, 150, 0,
	0, 0, 0, 0, 285, 176, 287, 0, 302, 407,
	423, 0, 0, 0, 452, 462, 0, 288, 118, 119,
	121, 123, 124, 125, 142, 141, 148, 175, 181, 0,
	203, 0, 0, 0, 179, 177, 0, 191, 0, 421,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 454, 65, 0, 66, 67, 0, 62, 63, 0,
	152, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 97, 0, 0,
	0, 0, 0, 74, 0, 80, 0, 0, 217, 258,
	319, 0, 176, 217, 320, 176, 176, 320, 176, 0,
	0, 320, 0, 320, 314, 0, 217, 0, 320, 409,
	320, 176, 419, 443, 451, 0, 242, 237, 0, 0,
	239, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 435, 437, 0, 0, 0, 286, 0, 0, 0,
	438, 441, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 0, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 301, 0, 0, 0, 478, 479,
	176, 154, 0, 90, 116, 0, 92, 93, 95, 96,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 98,
	0, 0, 0, 115, 204, 213, 214, 215, 211, 72,
	0, 75, 0, 0, 0, 0, 229, 0, 0, 263,
	217, 229, 176, 176, 152, 176, 217, 0, 176, 217,
	0, 0, 320, 0, 320, 176, 0, 0, 0, 217,
	229, 320, 176, 176, 176, 152, 0, 236, 245, 246,
	248, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 349, 350,
	366, 377, 380, 0, 0, 148, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 424, 0, 0,
	463, 465, 120, 0, 131, 132, 0, 135, 0, 137,
	138, 122, 140, 0, 127, 129, 130, 178, 180, -2,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 300, 0, 0, 0, 152,
	170, 0, 0, 176, 0, 0, 114, 76, 78, 79,
	0, 176, 0, 0, 0, 0, 256, 233, 0, 0,
	0, 0, 229, 281, 176, 152, 152, 229, 217, 229,
	0, 0, 217, 229, 0, 0, 0, 0, 0, 176,
	176, 152, 0, 0, 0, 318, 229, 322, 176, 176,
	152, 176, 152, 152, 229, 473, 474, 247, 249, 250,
	251, 252, 254, 404, 406, 0, 0, 0, 0, 0,
	0, 240, 241, 243, 244, 0, 267, 354, 356, 0,
	379, 381, 382, 383, 385, 0, 145, 148, 144, 429,
	0, 0, 0, 436, 0, 0, 0, 291, 431, 439,
	0, 0, 134, 136, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 395, 292, 0, 294, 297,
	0, 299, 408, 467, 468, 469, 470, 471, 154, 217,
	0, 153, 155, 159, 157, 164, 166, 151, 152, 113,
	99, 0, 0, 217, 259, 260, 261, 262, 223, 0,
	0, 227, 224, 225, 228, 216, 218, 220, 257, 280,
	152, 229, 229, 417, 229, 283, 0, 0, 229, 304,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 152, 152, 229, 0, 316, 317, 321, 176,
	152, 152, 229, 152, 229, 229, 413, 0, 0, 0,
	274, 275, 276, 277, 278, 279, 265, 0, 0, 359,
	386, 359, 386, 0, 384, 143, 0, 0, 0, 0,
	434, 0, 448, 0, 0, 457, 458, 464, 139, 128,
	183, 185, 0, 0, 0, 0, 0, 192, 290, 420,
	0, 293, 298, 170, 229, 0, 0, 0, 0, 0,
	154, 77, 0, 229, 231, 232, 0, 0, 221, 222,
	229, 415, 416, 282, 0, 176, 303, 176, 217, 327,
	332, 334, 328, 0, 330, 331, 0, 0, 0, 176,
	152, 229, 229, 340, 315, 152, 229, 229, 348, 229,
	411, 412, 0, 0, 405, 266, 0, 0, 0, 363,
	0, 355, 387, 388, 0, 0, 363, 357, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 447, 0, 0,
	460, 455, 184, 186, 187, 188, 189, 394, 217, 168,
	0, 171, 172, 173, 0, 156, 160, 0, 165, 170,
	0, 255, 0, 226, 219, 414, 176, 217, 217, 229,
	0, 0, 0, 176, 176, 152, 229, 338, 339, 229,
	346, 347, 410, 0, 0, 0, 268, 269, 395, 0,
	360, 389, 0, 0, 395, 0, 0, 426, 427, 432,
	0, 0, 449, 0, 0, 229, 70, 0, 169, 174,
	161, 0, 217, 0, 230, 217, 229, 229, 324, 333,
	329, 176, 152, 152, 229, 337, 345, 476, 475, 271,
	361, 364, 365, 390, 392, 391, 369, 0, 425, 0,
	0, 0, 459, 456, 168, 0, 0, 0, 229, 0,
	229, 326, 323, 152, 229, 229, 344, 270, 272, 352,
	0, 0, 371, 370, 0, 386, 428, 433, 0, 445,
	68, 0, 162, 0, 168, 0, 325, 229, 342, 343,
	273, 362, 393, 373, 372, 0, 396, 358, 0, 0,
	167, 163, 69, 0, 341, 375, 374, 399, 397, 0,
	446, 0, 353, 0, 398, 401, 0, 0, 0, 376,
	0, 0, 0, 0, 400, 402, 403, 444, 0, 0,
	0, 0, 86, 0, 0, 0, 83, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 84,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 85, 0,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
	yyMaxStackSize = 65536
)

type yyLexer interface {
	HasError() bool
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	if yylex.HasError() {
		goto ret1
	}
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		if len(yyS) >= yyMaxStackSize {
			yylex.Error("stack overflow")
			goto ret1
		}
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		if len(yyS) >= yyMaxStackSize {
			yylex.Error("stack overflow")
			goto ret1
		}
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:234
		{
			yyVAL.query = yyDollar[1].query
			setParseTree(yylex, yyVAL.query)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:241
		{
			yyVAL.query = Query{
				Statements: []Statement{yyDollar[1].stmt},
				depth:      depthCheck(yylex, 2+yyDollar[1].stmt.Depth()),
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:248
		{
			if len(yyDollar[1].query.Statements) >= 1 {
				yyVAL.query = yyDollar[1].query
			} else {
				yylex.Error("excrescent semicolo")
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:256
		{
			q := yyDollar[1].query
			q.Statements = append(q.Statements, yyDollar[3].stmt)
			q.depth = depthCheck(yylex, max(q.depth, len(q.Statements)+yyDollar[3].stmt.Depth()))
			yyVAL.query = q
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:267
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:271
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:275
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:279
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:283
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:291
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:295
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:299
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:303
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:307
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:311
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:315
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:339
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:343
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:351
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:355
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:359
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:363
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:391
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:411
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:419
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:475
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:483
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:499
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:513
		{
			yyVAL.stmt = &WithSelectStatement{
				CTEs:  yyDollar[2].ctes.ctes,
				Query: yyDollar[3].stmt.(*SelectStatement),
				depth: depthCheck(yylex, 1+maxDepth(yyDollar[2].ctes, yyDollar[3].stmt)),
			}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:527
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:533
		{
			stmt := &SelectStatement{
				Fields:           yyDollar[2].fields.fields,
				Sources:          yyDollar[4].sources.sources,
				Dimensions:       yyDollar[6].dimens.dims,
				ExceptDimensions: yyDollar[7].dimens.dims,
				Condition:        yyDollar[5].expr,
				SortFields:       yyDollar[9].sortfs,
				Limit:            yyDollar[10].intSlice[0],
				Offset:           yyDollar[10].intSlice[1],
				SLimit:           yyDollar[10].intSlice[2],
				SOffset:          yyDollar[10].intSlice[3],
				depth:            depthCheck(yylex, 1+maxDepth(yyDollar[2].fields, yyDollar[4].sources, yyDollar[5].expr, yyDollar[6].dimens, yyDollar[7].dimens, yyDollar[9].sortfs)),
			}
			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[8].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[11].location
			if len(yyDollar[3].sources.sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[3].sources.sources) == 1 {
				mst, ok := yyDollar[3].sources.sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
					depth:       depthCheck(yylex, 2),
				}
				stmt.depth = depthCheck(yylex, max(stmt.depth, 1+stmt.Target.depth))
			}
			yyVAL.stmt = stmt
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:577
		{
			stmt := &SelectStatement{
				Hints:            yyDollar[2].hints,
				Fields:           yyDollar[3].fields.fields,
				Sources:          yyDollar[5].sources.sources,
				Dimensions:       yyDollar[7].dimens.dims,
				ExceptDimensions: yyDollar[8].dimens.dims,
				Condition:        yyDollar[6].expr,
				SortFields:       yyDollar[10].sortfs,
				Limit:            yyDollar[11].intSlice[0],
				Offset:           yyDollar[11].intSlice[1],
				SLimit:           yyDollar[11].intSlice[2],
				SOffset:          yyDollar[11].intSlice[3],
				depth:            depthCheck(yylex, 1+maxDepth(yyDollar[3].fields, yyDollar[5].sources, yyDollar[6].expr, yyDollar[7].dimens, yyDollar[8].dimens, yyDollar[10].sortfs)),
			}

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[9].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[12].location
			if len(yyDollar[4].sources.sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[4].sources.sources) == 1 {
				mst, ok := yyDollar[4].sources.sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
					depth:       depthCheck(yylex, 2),
				}
				stmt.depth = depthCheck(yylex, max(stmt.depth, 1+stmt.Target.depth))
			}
			yyVAL.stmt = stmt
		}
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:623
		{
			stmt := &SelectStatement{
				Fields:           yyDollar[2].fields.fields,
				Dimensions:       yyDollar[4].dimens.dims,
				ExceptDimensions: yyDollar[5].dimens.dims,
				Condition:        yyDollar[3].expr,
				SortFields:       yyDollar[7].sortfs,
				Limit:            yyDollar[8].intSlice[0],
				Offset:           yyDollar[8].intSlice[1],
				SLimit:           yyDollar[8].intSlice[2],
				SOffset:          yyDollar[8].intSlice[3],
				depth:            depthCheck(yylex, 1+maxDepth(yyDollar[2].fields, yyDollar[3].expr, yyDollar[4].dimens, yyDollar[5].dimens, yyDollar[7].sortfs)),
			}

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[6].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[9].location
			yyVAL.stmt = stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:657
		{
			stmt1, ok := yyDollar[1].stmt.(*SelectStatement)
			if !ok {
				yylex.Error("Expected SelectStatement on left of UNION")
			}
			subquery1 := &SubQuery{Statement: stmt1, Alias: "", depth: depthCheck(yylex, 1+stmt1.Depth())}
			stmt2, ok := yyDollar[4].stmt.(*SelectStatement)
			if !ok {
				yylex.Error("Expected SelectStatement on right of UNION")
			}
			subquery2 := &SubQuery{Statement: stmt2, Alias: "", depth: depthCheck(yylex, 1+stmt2.Depth())}

			union := &Union{
				LSrc:      subquery1,
				UnionType: yyDollar[3].unionType,
				RSrc:      subquery2,
				depth:     depthCheck(yylex, max(subquery1.Depth(), subquery2.Depth())),
			}
			yyVAL.stmt = &SelectStatement{
				Fields:     []*Field{{Expr: &Wildcard{Type: Token(MUL)}, depth: depthCheck(yylex, 2)}},
				Sources:    []Source{union},
				IsRawQuery: true,
				depth:      depthCheck(yylex, 1+union.Depth()),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:685
		{
			yyVAL.unionType = UnionDistinct
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.unionType = UnionAll
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:693
		{
			yyVAL.unionType = UnionDistinctByName
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:697
		{
			yyVAL.unionType = UnionAllByName
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:703
		{
			yyVAL.stmt = &GraphStatement{HopNum: int(yyDollar[2].int64), StartNodeId: yyDollar[3].str, NodeCondition: yyDollar[5].expr, EdgeCondition: yyDollar[7].expr, depth: depthCheck(yylex, 1+maxDepth(yyDollar[5].expr, yyDollar[7].expr))}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:707
		{
			yyVAL.stmt = &GraphStatement{HopNum: int(yyDollar[2].int64), StartNodeId: yyDollar[3].str, NodeCondition: yyDollar[5].expr, depth: depthCheck(yylex, 1+maxDepth(yyDollar[5].expr))}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:711
		{
			yyVAL.stmt = &GraphStatement{HopNum: int(yyDollar[2].int64), StartNodeId: yyDollar[3].str, EdgeCondition: yyDollar[5].expr, depth: depthCheck(yylex, 1+maxDepth(yyDollar[5].expr))}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.stmt = &GraphStatement{HopNum: int(yyDollar[2].int64), StartNodeId: yyDollar[3].str, depth: depthCheck(yylex, 1)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.stmt = &GraphStatement{depth: depthCheck(yylex, 1)}
		}
	case 82:
		yyDollar = yyS[yypt-23 : yypt+1]
//line sql.y:723
		{
			stmt := &GraphStatement{depth: depthCheck(yylex, 1)}
			stmt.HopNum = int(yyDollar[16].int64)
			if !strings.EqualFold(yyDollar[7].str, "uid") {
				yylex.Error("cypher multi-hop-filter stmt node.uid ident err")
			}
			stmt.StartNodeId = yyDollar[9].str
			if yyDollar[21].cypherCondition != nil {
				c := yyDollar[21].cypherCondition
				if yyDollar[2].str != c.PathName && c.PathName != "" {
					yylex.Error("cypher multi-hop-filter stmt PathName err1")
				}
				stmt.NodeCondition = c.NodeCondition
				stmt.EdgeCondition = c.EdgeCondition
				stmt.AdditionalCondition = c.AdditionalCondition
				stmt.depth = depthCheck(yylex, max(stmt.depth, 1+maxDepth(stmt.NodeCondition, stmt.EdgeCondition, stmt.AdditionalCondition)))
			}
			if yyDollar[2].str != yyDollar[23].str {
				yylex.Error("cypher multi-hop-filter stmt PathName err2")
			}
			yyVAL.stmt = stmt
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:748
		{
			cc := &CypherCondition{}
			cc.AdditionalCondition = yyDollar[2].expr
			yyVAL.cypherCondition = cc
		}
	case 84:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:754
		{
			cc := &CypherCondition{}
			cc.PathName = yyDollar[8].str
			if strings.EqualFold(yyDollar[6].str, "nodes") {
				cc.NodeCondition = yyDollar[11].expr
			} else if strings.EqualFold(yyDollar[6].str, "edges") {
				cc.EdgeCondition = yyDollar[11].expr
			} else {
				yylex.Error("CYPHER_CONDITION nodes/edges func err")
			}
			if yyDollar[13].expr != nil {
				cc.AdditionalCondition = yyDollar[13].expr
			}
			yyVAL.cypherCondition = cc
		}
	case 85:
		yyDollar = yyS[yypt-25 : yypt+1]
//line sql.y:770
		{
			if yyDollar[8].str != yyDollar[20].str {
				yylex.Error("CYPHER_CONDITION PathName err")
			}
			if yyDollar[6].str == yyDollar[18].str {
				yylex.Error("CYPHER_CONDITION funcName same err")
			}
			cc := &CypherCondition{}
			cc.PathName = yyDollar[8].str
			if strings.EqualFold(yyDollar[6].str, "nodes") {
				cc.NodeCondition = yyDollar[11].expr
			} else if strings.EqualFold(yyDollar[6].str, "edges") {
				cc.EdgeCondition = yyDollar[11].expr
			} else {
				yylex.Error("CYPHER_CONDITION nodes/edges func err1")
			}

			if strings.EqualFold(yyDollar[18].str, "nodes") {
				cc.NodeCondition = yyDollar[23].expr
			} else if strings.EqualFold(yyDollar[18].str, "edges") {
				cc.EdgeCondition = yyDollar[23].expr
			} else {
				yylex.Error("CYPHER_CONDITION nodes/edges func err2")
			}
			if yyDollar[25].expr != nil {
				cc.AdditionalCondition = yyDollar[25].expr
			}
			yyVAL.cypherCondition = cc
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:800
		{
			yyVAL.cypherCondition = nil
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:805
		{
			yyVAL.expr = nil
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.fields = fieldsList{fields: []*Field{yyDollar[1].field}, depth: depthCheck(yylex, 1+yyDollar[1].field.Depth())}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			fl := yyDollar[1].fields
			fl.fields = append(fl.fields, yyDollar[3].field)
			fl.depth = depthCheck(yylex, max(fl.depth, len(fl.fields)+yyDollar[3].field.Depth()))
			yyVAL.fields = fl
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: Token(yyDollar[1].int)}, depth: depthCheck(yylex, 2)}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: TAG}, depth: depthCheck(yylex, 2)}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: FIELD}, depth: depthCheck(yylex, 2)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, depth: depthCheck(yylex, 1+yyDollar[1].expr.Depth())}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str, depth: depthCheck(yylex, 1+yyDollar[1].expr.Depth())}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:848
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str, depth: depthCheck(yylex, 1+yyDollar[1].expr.Depth())}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			newcase := yyDollar[2].expr.(*CaseWhenExpr)
			c := yyDollar[1].expr.(*CaseWhenExpr)
			c.depth = depthCheck(yylex, max(c.depth, len(c.Conditions)+newcase.depth))
			c.Conditions = append(c.Conditions, newcase.Conditions...)
			c.Assigners = append(c.Assigners, newcase.Assigners...)
			yyVAL.expr = c
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:869
		{
			c := &CaseWhenExpr{depth: depthCheck(yylex, 2+maxDepth(yyDollar[2].expr, yyDollar[4].expr))}
			c.Conditions = []Expr{yyDollar[2].expr}
			c.Assigners = []Expr{yyDollar[4].expr}
			yyVAL.expr = c
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.expr = &BinaryExpr{Op: Token(DIV), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:886
		{
			yyVAL.expr = &BinaryExpr{Op: Token(ADD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:890
		{
			yyVAL.expr = &BinaryExpr{Op: Token(SUB), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:894
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_XOR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:898
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MOD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:902
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_AND), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:906
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_OR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:910
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr, depth: depthCheck(yylex, 1+yyDollar[2].expr.Depth())}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:918
		{
			switch s := yyDollar[2].expr.(type) {
			case *NumberLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			case *IntegerLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			default:
				yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: &IntegerLiteral{Val: -1}, RHS: yyDollar[2].expr, depth: depthCheck(yylex, 1+yyDollar[2].expr.Depth())}
			}

		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.expr = &DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:940
		{
			c := yyDollar[2].expr.(*CaseWhenExpr)
			c.Assigners = append(c.Assigners, yyDollar[4].expr)
			c.depth = depthCheck(yylex, max(c.depth, 1+len(c.Assigners)+yyDollar[4].expr.Depth()))
			yyVAL.expr = c
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:954
		{
			if strings.ToLower(yyDollar[1].str) == "cast" {
				if len(yyDollar[3].fields.fields) != 1 {
					yylex.Error("The cast format is incorrect.")
				} else {
					name := "Unknown"
					if strings.ToLower(yyDollar[3].fields.fields[0].Alias) == "bool" {
						name = "cast_bool"
					}
					if strings.ToLower(yyDollar[3].fields.fields[0].Alias) == "float" {
						name = "cast_float64"
					}
					if strings.ToLower(yyDollar[3].fields.fields[0].Alias) == "int" {
						name = "cast_int64"
					}
					if strings.ToLower(yyDollar[3].fields.fields[0].Alias) == "string" {
						name = "cast_string"
					}
					cols := &Call{Name: strings.ToLower(name), Args: []Expr{yyDollar[3].fields.fields[0].Expr}, depth: depthCheck(yylex, 2+yyDollar[3].fields.fields[0].Depth())}
					yyVAL.expr = cols
				}
			} else {
				cols := &Call{Name: strings.ToLower(yyDollar[1].str), Args: []Expr{}, depth: depthCheck(yylex, 1)}
				for i, fld := range yyDollar[3].fields.fields {
					cols.Args = append(cols.Args, fld.Expr)
					cols.depth = depthCheck(yylex, max(cols.depth, 2+i+fld.Expr.Depth()))
				}
				yyVAL.expr = cols
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str), depth: depthCheck(yylex, 1)}
			yyVAL.expr = cols
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.sources = sourcesList{
				sources: []Source{yyDollar[2].ment},
				depth:   depthCheck(yylex, 1+yyDollar[2].ment.Depth()),
			}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.sources = sourcesList{sources: nil, depth: depthCheck(yylex, 0)}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.sources = yyDollar[1].sources
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			sl := yyDollar[1].sources
			sl.depth = depthCheck(yylex, max(sl.depth, len(sl.sources)+yyDollar[3].sources.depth))
			sl.sources = append(sl.sources, yyDollar[3].sources.sources...)
			yyVAL.sources = sl
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.sources = sourcesList{sources: []Source{yyDollar[1].ment}, depth: depthCheck(yylex, 1+yyDollar[1].ment.Depth())}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1030
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = sourcesList{sources: []Source{yyDollar[1].ment}, depth: depthCheck(yylex, 1+yyDollar[1].ment.Depth())}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.sources = yyDollar[1].sources
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.sources = yyDollar[1].sources
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.sources = sourcesList{sources: []Source{yyDollar[1].tableFunction}, depth: depthCheck(yylex, 1+yyDollar[1].tableFunction.Depth())}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1049
		{
			tableFunction := yyDollar[3].tableFunction
			tableFunction.FunctionName = yyDollar[1].str
			yyVAL.tableFunction = tableFunction
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			if yyDollar[1].tableFunctionField.GetType() == 0 {
				yyVAL.tableFunction = &TableFunction{TableFunctionSource: []Source{yyDollar[1].tableFunctionField.GetSource()}, depth: depthCheck(yylex, 1+yyDollar[1].tableFunctionField.Depth())}
			} else {
				yyVAL.tableFunction = &TableFunction{Params: yyDollar[1].tableFunctionField.GetContent(), depth: depthCheck(yylex, 1+yyDollar[1].tableFunctionField.Depth())}
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1066
		{
			tableFunction := yyDollar[1].tableFunction
			tableFunctionField := yyDollar[3].tableFunctionField
			if tableFunctionField.GetType() == 0 {
				tableFunction.TableFunctionSource = append(tableFunction.TableFunctionSource, tableFunctionField.GetSource())
			} else {
				tableFunction.Params = tableFunctionField.GetContent()
			}
			tableFunction.depth = depthCheck(yylex, max(tableFunction.depth, len(tableFunction.TableFunctionFields)+yyDollar[3].tableFunctionField.Depth()))
			yyVAL.tableFunction = tableFunction
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			tableFunctionField := &TableFunctionField{
				typ:     1,
				content: yyDollar[1].str,
				depth:   depthCheck(yylex, 1),
			}
			yyVAL.tableFunctionField = tableFunctionField
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			tableFunctionField := &TableFunctionField{
				typ:    0,
				source: &Measurement{Name: yyDollar[1].str},
				depth:  depthCheck(yylex, 1),
			}
			yyVAL.tableFunctionField = tableFunctionField
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.joinType = FullJoin
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.joinType = InnerJoin
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.joinType = InnerJoin
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1113
		{
			yyVAL.joinType = LeftOuterJoin
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1117
		{
			yyVAL.joinType = LeftOuterJoin
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.joinType = RightOuterJoin
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.joinType = RightOuterJoin
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.joinType = OuterJoin
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1136
		{
			if len(yyDollar[1].sources.sources) != 1 || len(yyDollar[3].sources.sources) != 1 {
				yylex.Error("expected 1 source")
			}
			join := &Join{
				JoinType:  yyDollar[2].joinType,
				Condition: yyDollar[5].expr,
				depth:     depthCheck(yylex, 1+yyDollar[5].expr.Depth()),
			}
			if joinLeft, ok := yyDollar[1].sources.sources[0].(*Join); ok {
				joinStatement := &SelectStatement{
					Fields:     []*Field{{Expr: &Wildcard{Type: Token(MUL)}, depth: depthCheck(yylex, 2)}},
					Sources:    []Source{joinLeft},
					IsRawQuery: true,
					depth:      depthCheck(yylex, 2+joinLeft.Depth()),
				}
				alias := joinLeft.LSrc.GetName() + "," + joinLeft.RSrc.GetName()
				join.LSrc = &SubQuery{Statement: joinStatement, Alias: alias, depth: depthCheck(yylex, 1+joinStatement.Depth())}
			} else {
				join.LSrc = yyDollar[1].sources.sources[0]
			}
			if joinRight, ok := yyDollar[3].sources.sources[0].(*Join); ok {
				joinStatement := &SelectStatement{
					Fields:     []*Field{{Expr: &Wildcard{Type: Token(MUL)}, depth: depthCheck(yylex, 2)}},
					Sources:    []Source{joinRight},
					IsRawQuery: true,
					depth:      depthCheck(yylex, 2+joinRight.Depth()),
				}
				join.RSrc = &SubQuery{Statement: joinStatement, Alias: "", depth: depthCheck(yylex, 1+joinStatement.Depth())}
			} else {
				join.RSrc = yyDollar[3].sources.sources[0]
			}
			join.depth = depthCheck(yylex, max(join.depth, 1+maxDepth(join.LSrc, join.RSrc)))
			yyVAL.sources = sourcesList{sources: []Source{join}, depth: depthCheck(yylex, 1+join.depth)}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			stmt, ok := yyDollar[1].stmt.(*SelectStatement)
			if !ok {
				yylex.Error("expexted SelectStatement")
			}
			subquery := &SubQuery{Statement: stmt, Alias: yyDollar[3].str, depth: depthCheck(yylex, 1+stmt.Depth())}
			yyVAL.sources = sourcesList{sources: []Source{subquery}, depth: depthCheck(yylex, 1+subquery.depth)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			stmt, ok := yyDollar[1].stmt.(*SelectStatement)
			if !ok {
				yylex.Error("expexted SelectStatement")
			}
			subquery := &SubQuery{Statement: stmt, depth: depthCheck(yylex, 1+stmt.Depth())}
			yyVAL.sources = sourcesList{sources: []Source{subquery}, depth: depthCheck(yylex, 1+subquery.depth)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1200
		{
			mst := yyDollar[5].ment
			mst.Database = yyDollar[1].str
			mst.RetentionPolicy = yyDollar[3].str
			yyVAL.ment = mst
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1207
		{
			mst := yyDollar[4].ment
			mst.RetentionPolicy = yyDollar[2].str
			yyVAL.ment = mst
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1213
		{
			mst := yyDollar[4].ment
			mst.Database = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1219
		{
			mst := yyDollar[3].ment
			mst.RetentionPolicy = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}

			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1254
		{
			yyVAL.dimens = dimensionsList{dims: nil, depth: depthCheck(yylex, 0)}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1260
		{
			yyVAL.dimens = yyDollar[2].dimens
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1264
		{
			yyVAL.dimens = dimensionsList{dims: nil, depth: depthCheck(yylex, 0)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.dimens = dimensionsList{dims: []*Dimension{yyDollar[1].dimen}, depth: depthCheck(yylex, 1+yyDollar[1].dimen.Depth())}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			dl := yyDollar[1].dimens
			dl.dims = append(dl.dims, yyDollar[3].dimen)
			dl.depth = depthCheck(yylex, max(dl.depth, len(dl.dims)+yyDollar[3].dimen.Depth()))
			yyVAL.dimens = dl
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}, depth: depthCheck(yylex, 2)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1297
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}, depth: depthCheck(yylex, 2)}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1301
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}}, depth: depthCheck(yylex, 3)}, depth: depthCheck(yylex, 4)}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1309
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: yyDollar[5].tdur}}, depth: depthCheck(yylex, 4)}, depth: depthCheck(yylex, 5)}
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1317
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: time.Duration(-yyDollar[6].tdur)}}, depth: depthCheck(yylex, 4)}, depth: depthCheck(yylex, 5)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}, depth: depthCheck(yylex, 2)}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1329
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}, depth: depthCheck(yylex, 2)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.dimen = &Dimension{Expr: &RegexLiteral{Val: re}, depth: depthCheck(yylex, 2)}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			if strings.ToLower(yyDollar[1].str) != "tz" {
				yylex.Error("Expect tz")
			}
			loc, err := time.LoadLocation(yyDollar[3].str)
			if err != nil {
				yylex.Error("nable to find time zone")
			}
			yyVAL.location = loc
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1355
		{
			yyVAL.location = nil
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.inter = yyDollar[3].inter
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1365
		{
			yyVAL.inter = "null"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1371
		{
			yyVAL.inter = yyDollar[1].str
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.inter = yyDollar[1].int64
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1379
		{
			yyVAL.inter = yyDollar[1].float64
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1383
		{
			switch s := yyDollar[2].inter.(type) {
			case int64:
				yyVAL.inter = -1 * s
			case float64:
				yyVAL.inter = -1 * s
			default:
				yyVAL.inter = yyDollar[2].inter
			}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1396
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1400
		{
			yyVAL.expr = nil
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1406
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1420
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+max(yyDollar[1].expr.Depth(), yyDollar[3].expr.Depth()))}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1430
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr, depth: depthCheck(yylex, 1+yyDollar[2].expr.Depth())}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1434
		{
			ident := &VarRef{Val: yyDollar[1].str}
			vals := make(map[interface{}]bool)
			for _, fld := range yyDollar[4].fields.fields {
				switch fld.Expr.(type) {
				case *StringLiteral:
					vals[fld.Expr.(*StringLiteral).Val] = true
				case *NumberLiteral:
					vals[float64(fld.Expr.(*NumberLiteral).Val)] = true
				case *IntegerLiteral:
					vals[float64(fld.Expr.(*IntegerLiteral).Val)] = true
				}
			}
			yyVAL.expr = &BinaryExpr{LHS: ident, Op: Token(IN), RHS: &SetLiteral{Vals: vals}, depth: depthCheck(yylex, 2)}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1450
		{
			ident := &VarRef{Val: yyDollar[1].str}
			vals := make(map[interface{}]bool)
			for _, fld := range yyDollar[5].fields.fields {
				switch fld.Expr.(type) {
				case *StringLiteral:
					vals[fld.Expr.(*StringLiteral).Val] = true
				case *NumberLiteral:
					vals[float64(fld.Expr.(*NumberLiteral).Val)] = true
				case *IntegerLiteral:
					vals[float64(fld.Expr.(*IntegerLiteral).Val)] = true
				}
			}
			yyVAL.expr = &BinaryExpr{LHS: ident, Op: Token(NOTIN), RHS: &SetLiteral{Vals: vals}, depth: depthCheck(yylex, 2)}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1466
		{
			if _, ok := yyDollar[4].stmt.(*SelectStatement); !ok {
				yylex.Error("IN requires SELECT statement")
			} else {
				yyVAL.expr = &InCondition{
					Stmt:   yyDollar[4].stmt.(*SelectStatement),
					Column: &VarRef{Val: yyDollar[1].str},
					depth:  depthCheck(yylex, 1+yyDollar[4].stmt.Depth()),
				}
			}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1478
		{
			if _, ok := yyDollar[5].stmt.(*SelectStatement); !ok {
				yylex.Error("IN requires SELECT statement")
			} else {
				yyVAL.expr = &InCondition{
					Stmt:     yyDollar[5].stmt.(*SelectStatement),
					Column:   &VarRef{Val: yyDollar[1].str},
					depth:    depthCheck(yylex, 1+yyDollar[5].stmt.Depth()),
					NotEqual: true,
				}
			}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1491
		{
			yyVAL.expr = &BinaryExpr{
				LHS:   &VarRef{Val: yyDollar[3].str},
				RHS:   &StringLiteral{Val: yyDollar[5].str},
				Op:    MATCH,
				depth: depthCheck(yylex, 2),
			}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1500
		{
			yyVAL.expr = &BinaryExpr{
				LHS:   &VarRef{Val: yyDollar[3].str},
				RHS:   &StringLiteral{Val: yyDollar[5].str},
				Op:    MATCHPHRASE,
				depth: depthCheck(yylex, 2),
			}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1509
		{
			yyVAL.expr = &BinaryExpr{
				LHS:   &VarRef{Val: yyDollar[3].str},
				RHS:   &StringLiteral{Val: yyDollar[5].str},
				Op:    IPINRANGE,
				depth: depthCheck(yylex, 2),
			}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1520
		{
			if yyDollar[2].int == NEQREGEX {
				switch yyDollar[3].expr.(type) {
				case *RegexLiteral:
				default:
					yylex.Error("expected regular expression")
				}
			}
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr, depth: depthCheck(yylex, 1+maxDepth(yyDollar[1].expr, yyDollar[3].expr))}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr, depth: depthCheck(yylex, 1+yyDollar[2].expr.Depth())}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.int = EQ
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.int = NEQ
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.int = LT
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.int = LTE
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.int = GT
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.int = GTE
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1567
		{
			yyVAL.int = EQREGEX
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.int = NEQREGEX
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1575
		{
			yyVAL.int = LIKE
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = yyDollar[1].str
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1591
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str, Type: yyDollar[3].dataType}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.expr = &NumberLiteral{Val: yyDollar[1].float64}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.expr = &IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.expr = &StringLiteral{Val: yyDollar[1].str}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.expr = &BooleanLiteral{Val: true}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.expr = &BooleanLiteral{Val: false}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.expr = &RegexLiteral{Val: re}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1623
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str + "." + yyDollar[3].str, Type: Tag}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			switch strings.ToLower(yyDollar[1].str) {
			case "float":
				yyVAL.dataType = Float
			case "integer":
				yyVAL.dataType = Integer
			case "string":
				yyVAL.dataType = String
			case "boolean":
				yyVAL.dataType = Boolean
			case "time":
				yyVAL.dataType = Time
			case "duration":
				yyVAL.dataType = Duration
			case "unsigned":
				yyVAL.dataType = Unsigned
			default:
				yylex.Error("wrong field dataType")
			}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.dataType = Tag
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.dataType = AnyField
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1664
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1668
		{
			yyVAL.sortfs = nil
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.sortfs = []*SortField{yyDollar[1].sortf}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1678
		{
			yyVAL.sortfs = append(yyDollar[1].sortfs, yyDollar[3].sortf)
			depthCheck(yylex, len(yyVAL.sortfs))
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1685
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: false}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.intSlice = append(yyDollar[1].intSlice, yyDollar[2].intSlice...)
			depthCheck(yylex, len(yyVAL.intSlice))
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.int64 = yyDollar[1].int64
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			if n, ok := yyDollar[1].expr.(*IntegerLiteral); ok {
				yyVAL.int64 = n.Val
			} else {
				yylex.Error("unsupported type, expect integer type")
			}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1729
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1739
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: false}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: true}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1767
		{
			sms := yyDollar[4].stmt

			sms.(*CreateDatabaseStatement).Name = yyDollar[3].str
			sms.(*CreateDatabaseStatement).DatabaseAttr = yyDollar[5].databasePolicy
			yyVAL.stmt = sms
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1775
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = false
			stmt.Name = yyDollar[3].str
			stmt.DatabaseAttr = yyDollar[4].databasePolicy
			yyVAL.stmt = stmt
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: false}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1790
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: yyDollar[1].bool}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1795
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: yyDollar[3].bool}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[3].int64), EnableTagArray: yyDollar[1].bool}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1804
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: false}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			if strings.ToLower(yyDollar[3].str) != "array" {
				yylex.Error("unsupport type")
			}
			yyVAL.bool = true
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1817
		{
			yyVAL.bool = false
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = true
			stmt.RetentionPolicyDuration = yyDollar[2].durations.PolicyDuration
			stmt.RetentionPolicyReplication = yyDollar[2].durations.Replication
			stmt.RetentionPolicyName = yyDollar[2].durations.PolicyName
			stmt.ShardKey = yyDollar[2].durations.ShardKey
			sort.Strings(stmt.ShardKey)

			if yyDollar[2].durations.rpdefault == true {
				yylex.Error("no default")
			}

			if yyDollar[2].durations.ShardGroupDuration == -1 || yyDollar[2].durations.ShardGroupDuration == 0 {
				stmt.RetentionPolicyShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
			}

			if yyDollar[2].durations.ShardMergeDuration == -1 || yyDollar[2].durations.ShardMergeDuration == 0 {
				stmt.RetentionPolicyShardMergeDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardMergeDuration = yyDollar[2].durations.ShardMergeDuration
			}

			if yyDollar[2].durations.HotDuration == -1 || yyDollar[2].durations.HotDuration == 0 {
				stmt.RetentionPolicyHotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyHotDuration = yyDollar[2].durations.HotDuration
			}

			if yyDollar[2].durations.WarmDuration == -1 || yyDollar[2].durations.WarmDuration == 0 {
				stmt.RetentionPolicyWarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyWarmDuration = yyDollar[2].durations.WarmDuration
			}

			if yyDollar[2].durations.IndexColdDuration == -1 || yyDollar[2].durations.IndexColdDuration == 0 {
				stmt.RetentionPolicyIndexColdDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexColdDuration = yyDollar[2].durations.IndexColdDuration
			}

			if yyDollar[2].durations.IndexGroupDuration == -1 || yyDollar[2].durations.IndexGroupDuration == 0 {
				stmt.RetentionPolicyIndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
			}
			yyVAL.stmt = stmt
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.ShardMergeDuration < 0 || yyDollar[2].durations.ShardMergeDuration < 0 {
				if yyDollar[2].durations.ShardMergeDuration >= 0 {
					yyDollar[1].durations.ShardMergeDuration = yyDollar[2].durations.ShardMergeDuration
				}
			} else {
				yylex.Error("Repeat Shard Merge Duration")
			}

			if len(yyDollar[1].durations.ShardKey) != 0 && len(yyDollar[2].durations.ShardKey) != 0 {
				yylex.Error("Repeat ShardKey")
			} else if len(yyDollar[2].durations.ShardKey) != 0 {
				yyDollar[1].durations.ShardKey = yyDollar[2].durations.ShardKey
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexColdDuration < 0 || yyDollar[2].durations.IndexColdDuration < 0 {
				if yyDollar[2].durations.IndexColdDuration >= 0 {
					yyDollar[1].durations.IndexColdDuration = yyDollar[2].durations.IndexColdDuration
				}
			} else {
				yylex.Error("Repeat Index Cold Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.PolicyDuration == nil || yyDollar[2].durations.PolicyDuration == nil {
				if yyDollar[2].durations.PolicyDuration != nil {
					yyDollar[1].durations.PolicyDuration = yyDollar[2].durations.PolicyDuration
				}
			} else {
				yylex.Error("Repeat Policy Duration")
			}

			if yyDollar[1].durations.Replication == nil || yyDollar[2].durations.Replication == nil {
				if yyDollar[2].durations.Replication != nil {
					yyDollar[1].durations.Replication = yyDollar[2].durations.Replication
				}
			} else {
				yylex.Error("Repeat Policy Replication")
			}

			if len(yyDollar[1].durations.PolicyName) == 0 || len(yyDollar[2].durations.PolicyName) == 0 {
				if len(yyDollar[2].durations.PolicyName) != 0 {
					yyDollar[1].durations.PolicyName = yyDollar[2].durations.PolicyName
				}
			} else {
				yylex.Error("Repeat Policy Name")
			}

			if yyDollar[1].durations.rpdefault == false || yyDollar[2].durations.rpdefault == false {
				if yyDollar[2].durations.rpdefault == true {
					yyDollar[1].durations.rpdefault = yyDollar[2].durations.rpdefault
				}
			} else {
				yylex.Error("Repeat rpdefault")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1974
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1978
		{
			duration := yyDollar[2].tdur
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, PolicyDuration: &duration, ShardMergeDuration: -1}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1983
		{
			replicaN := int(yyDollar[2].int64)
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, Replication: &replicaN, ShardMergeDuration: -1}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1988
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, PolicyName: yyDollar[2].str, ShardMergeDuration: -1}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, ReplicaNum: uint32(yyDollar[2].int64), ShardMergeDuration: -1}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, rpdefault: true, ShardMergeDuration: -1}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2000
		{
			if len(yyDollar[2].strSlice) == 0 {
				yylex.Error("ShardKey should not be nil")
			}
			yyVAL.durations = &Durations{ShardKey: yyDollar[2].strSlice, ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, rpdefault: false, ShardMergeDuration: -1}
		}
	case 255:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2011
		{
			yyVAL.stmt = &ShowMeasurementsStatement{
				Database:   yyDollar[3].str,
				Source:     yyDollar[6].ment,
				Condition:  yyDollar[7].expr,
				SortFields: yyDollar[8].sortfs,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].ment, yyDollar[7].expr, yyDollar[8].sortfs)),
			}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2023
		{
			yyVAL.stmt = &ShowMeasurementsStatement{
				Database:   yyDollar[3].str,
				Condition:  yyDollar[4].expr,
				SortFields: yyDollar[5].sortfs,
				Limit:      yyDollar[6].intSlice[0],
				Offset:     yyDollar[6].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[4].expr, yyDollar[5].sortfs)),
			}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2036
		{
			yyVAL.stmt = &ShowMeasurementsDetailStatement{
				Database: yyDollar[4].str,
				Source:   yyDollar[7].ment,
				depth:    depthCheck(yylex, 1+maxDepth(yyDollar[7].ment)),
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2044
		{
			yyVAL.stmt = &ShowMeasurementsDetailStatement{
				Database: yyDollar[4].str,
				depth:    depthCheck(yylex, 1),
			}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2082
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{
				Database: yyDollar[5].str,
			}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2095
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2102
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Default = true
			yyVAL.stmt = stmt
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2112
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 268:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2119
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Admin = true
			yyVAL.stmt = stmt
		}
	case 269:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2127
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Rwuser = true
			yyVAL.stmt = stmt
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2138
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			stmt.Replication = int(yyDollar[4].int64)

			if yyDollar[5].durations.ShardGroupDuration == -1 || yyDollar[5].durations.ShardGroupDuration == 0 {
				stmt.ShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.ShardGroupDuration = yyDollar[5].durations.ShardGroupDuration
			}

			if yyDollar[5].durations.HotDuration == -1 || yyDollar[5].durations.HotDuration == 0 {
				stmt.HotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.HotDuration = yyDollar[5].durations.HotDuration
			}

			if yyDollar[5].durations.WarmDuration == -1 || yyDollar[5].durations.WarmDuration == 0 {
				stmt.WarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.WarmDuration = yyDollar[5].durations.WarmDuration
			}

			if yyDollar[5].durations.IndexColdDuration == -1 || yyDollar[5].durations.IndexColdDuration == 0 {
				stmt.IndexColdDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.IndexColdDuration = yyDollar[5].durations.IndexColdDuration
			}

			if yyDollar[5].durations.IndexGroupDuration == -1 || yyDollar[5].durations.IndexGroupDuration == 0 {
				stmt.IndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.IndexGroupDuration = yyDollar[5].durations.IndexGroupDuration
			}

			if yyDollar[5].durations.ShardMergeDuration == -1 || yyDollar[5].durations.ShardMergeDuration == 0 {
				stmt.ShardMergeDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.ShardMergeDuration = yyDollar[5].durations.ShardMergeDuration
			}

			yyVAL.stmt = stmt
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2182
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			stmt.Replication = int(yyDollar[4].int64)
			yyVAL.stmt = stmt
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexColdDuration < 0 || yyDollar[2].durations.IndexColdDuration < 0 {
				if yyDollar[2].durations.IndexColdDuration >= 0 {
					yyDollar[1].durations.IndexColdDuration = yyDollar[2].durations.IndexColdDuration
				}
			} else {
				yylex.Error("Repeat Index Cold Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.ShardMergeDuration < 0 || yyDollar[2].durations.ShardMergeDuration < 0 {
				if yyDollar[2].durations.ShardMergeDuration >= 0 {
					yyDollar[1].durations.ShardMergeDuration = yyDollar[2].durations.ShardMergeDuration
				}
			} else {
				yylex.Error("Repeat ShardMerge Duration")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.durations = &Durations{ShardGroupDuration: yyDollar[3].tdur, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, ShardMergeDuration: -1}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: yyDollar[3].tdur, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, ShardMergeDuration: -1}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: yyDollar[3].tdur, IndexGroupDuration: -1, IndexColdDuration: -1, ShardMergeDuration: -1}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: yyDollar[3].tdur, IndexColdDuration: -1, ShardMergeDuration: -1}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: yyDollar[3].tdur, ShardMergeDuration: -1}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, IndexColdDuration: -1, ShardMergeDuration: yyDollar[3].tdur}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2278
		{
			yyVAL.stmt = &ShowSeriesStatement{
				Database:   yyDollar[3].str,
				Sources:    yyDollar[4].sources.sources,
				Condition:  yyDollar[5].expr,
				SortFields: yyDollar[6].sortfs,
				Limit:      yyDollar[7].intSlice[0],
				Offset:     yyDollar[7].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[4].sources, yyDollar[5].expr, yyDollar[6].sortfs)),
			}
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2290
		{
			yyVAL.stmt = &ShowSeriesStatement{
				Database:   yyDollar[3].str,
				Condition:  yyDollar[4].expr,
				SortFields: yyDollar[5].sortfs,
				Limit:      yyDollar[6].intSlice[0],
				Offset:     yyDollar[6].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[4].expr, yyDollar[5].sortfs)),
			}
		}
	case 282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2301
		{
			yyVAL.stmt = &ShowSeriesStatement{
				Hints:      yyDollar[2].hints,
				Database:   yyDollar[4].str,
				Sources:    yyDollar[5].sources.sources,
				Condition:  yyDollar[6].expr,
				SortFields: yyDollar[7].sortfs,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].sources, yyDollar[6].expr, yyDollar[7].sortfs)),
			}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2314
		{
			yyVAL.stmt = &ShowSeriesStatement{
				Hints:      yyDollar[2].hints,
				Database:   yyDollar[4].str,
				Condition:  yyDollar[5].expr,
				SortFields: yyDollar[6].sortfs,
				Limit:      yyDollar[7].intSlice[0],
				Offset:     yyDollar[7].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].expr, yyDollar[6].sortfs)),
			}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			yyVAL.stmt = &ShowUsersStatement{}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.stmt = &DropDatabaseStatement{Name: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			yyVAL.stmt = &DropSeriesStatement{
				Sources:   yyDollar[3].sources.sources,
				Condition: yyDollar[4].expr,
				depth:     depthCheck(yylex, 1+maxDepth(yyDollar[3].sources, yyDollar[4].expr)),
			}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.stmt = &DropSeriesStatement{
				Condition: yyDollar[3].expr,
				depth:     depthCheck(yylex, 1+maxDepth(yyDollar[3].expr)),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.stmt = &DeleteSeriesStatement{
				Sources:   yyDollar[2].sources.sources,
				Condition: yyDollar[3].expr,
				depth:     depthCheck(yylex, 1+maxDepth(yyDollar[2].sources, yyDollar[3].expr)),
			}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.stmt = &DeleteSeriesStatement{
				Condition: yyDollar[2].expr,
				depth:     depthCheck(yylex, 1+maxDepth(yyDollar[2].expr)),
			}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2375
		{
			stmt := &AlterRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Duration = yyDollar[7].durations.PolicyDuration
			stmt.Replication = yyDollar[7].durations.Replication
			stmt.Default = yyDollar[7].durations.rpdefault
			if yyDollar[7].durations.ShardGroupDuration == -1 {
				stmt.ShardGroupDuration = nil
			} else {
				stmt.ShardGroupDuration = &yyDollar[7].durations.ShardGroupDuration
			}
			if yyDollar[7].durations.HotDuration == -1 {
				stmt.HotDuration = nil
			} else {
				stmt.HotDuration = &yyDollar[7].durations.HotDuration
			}
			if yyDollar[7].durations.WarmDuration == -1 {
				stmt.WarmDuration = nil
			} else {
				stmt.WarmDuration = &yyDollar[7].durations.WarmDuration
			}
			if yyDollar[7].durations.IndexColdDuration == -1 {
				stmt.IndexColdDuration = nil
			} else {
				stmt.IndexColdDuration = &yyDollar[7].durations.IndexColdDuration
			}
			if yyDollar[7].durations.IndexGroupDuration == -1 {
				stmt.IndexGroupDuration = nil
			} else {
				stmt.IndexGroupDuration = &yyDollar[7].durations.IndexGroupDuration
			}

			if len(yyDollar[7].durations.PolicyName) > 0 || yyDollar[7].durations.ReplicaNum != 0 {
				yylex.Error("PolicyName and ReplicaNum")
			}
			yyVAL.stmt = stmt
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2418
		{
			stmt := &DropRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2427
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2435
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2443
		{
			stmt := &GrantStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2460
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[5].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2470
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2478
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2486
		{
			stmt := &RevokeStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2503
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[5].str}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[4].str}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.stmt = &DropUserStatement{Name: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2519
		{
			yyVAL.stmt = &ShowTagKeysStatement{
				Database:   yyDollar[4].str,
				Sources:    yyDollar[5].sources.sources,
				Condition:  yyDollar[6].expr,
				SortFields: yyDollar[7].sortfs,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				SLimit:     yyDollar[8].intSlice[2],
				SOffset:    yyDollar[8].intSlice[3],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].sources, yyDollar[6].expr, yyDollar[7].sortfs)),
			}

		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2534
		{
			yyVAL.stmt = &ShowTagKeysStatement{
				Database:   yyDollar[4].str,
				Condition:  yyDollar[5].expr,
				SortFields: yyDollar[6].sortfs,
				Limit:      yyDollar[7].intSlice[0],
				Offset:     yyDollar[7].intSlice[1],
				SLimit:     yyDollar[7].intSlice[2],
				SOffset:    yyDollar[7].intSlice[3],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].expr, yyDollar[6].sortfs)),
			}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = "PRIMARYKEY"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = "SORTKEY"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = "PROPERTY"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = "SHARDKEY"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.str = "ENGINETYPE"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.str = "SCHEMA"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = "INDEXES"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.str = "COMPACT"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yylex.Error("SHOW command error, only support PRIMARYKEY, SORTKEY, SHARDKEY, ENGINETYPE, INDEXES, SCHEMA, COMPACT")
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 315:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2594
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Rp = yyDollar[6].str
			stmt.Measurement = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2603
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2611
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Rp = yyDollar[5].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2619
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.str = yyDollar[2].str
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2638
		{
			yyVAL.stmt = &ShowFieldKeysStatement{
				Database:   yyDollar[4].str,
				Sources:    yyDollar[5].sources.sources,
				SortFields: yyDollar[6].sortfs,
				Limit:      yyDollar[7].intSlice[0],
				Offset:     yyDollar[7].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].sources, yyDollar[6].sortfs)),
			}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2649
		{
			yyVAL.stmt = &ShowFieldKeysStatement{
				Database:   yyDollar[4].str,
				SortFields: yyDollar[5].sortfs,
				Limit:      yyDollar[6].intSlice[0],
				Offset:     yyDollar[6].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].sortfs)),
			}
		}
	case 323:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2662
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources.sources
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+maxDepth(yyDollar[5].sources, yyDollar[9].expr, yyDollar[10].sortfs)))
			yyVAL.stmt = stmt
		}
	case 324:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2675
		{
			stmt := yyDollar[7].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[8].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+maxDepth(yyDollar[8].expr, yyDollar[9].sortfs)))
			yyVAL.stmt = stmt
		}
	case 325:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2687
		{
			stmt := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Hints = yyDollar[2].hints
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[5].str
			stmt.Sources = yyDollar[6].sources.sources
			stmt.Condition = yyDollar[10].expr
			stmt.SortFields = yyDollar[11].sortfs
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+maxDepth(yyDollar[6].sources, yyDollar[10].expr, yyDollar[11].sortfs)))
			yyVAL.stmt = stmt
		}
	case 326:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2701
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.Hints = yyDollar[2].hints
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[5].str
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+maxDepth(yyDollar[9].expr, yyDollar[10].sortfs)))
			yyVAL.stmt = stmt
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.stmt = &ShowTagValuesStatement{
				Op:         EQ,
				TagKeyExpr: yyDollar[2].expr.(*ListLiteral),
				depth:      depthCheck(yylex, 1+yyDollar[2].expr.Depth()),
			}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.stmt = &ShowTagValuesStatement{
				Op:         NEQ,
				TagKeyExpr: yyDollar[2].expr.(*ListLiteral),
				depth:      depthCheck(yylex, 1+yyDollar[2].expr.Depth()),
			}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2732
		{
			yyVAL.stmt = &ShowTagValuesStatement{
				Op:         IN,
				TagKeyExpr: yyDollar[3].expr.(*ListLiteral),
				depth:      depthCheck(yylex, 1+yyDollar[3].expr.Depth()),
			}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			stmt := &ShowTagValuesStatement{depth: depthCheck(yylex, 2)}
			stmt.Op = EQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			stmt := &ShowTagValuesStatement{depth: depthCheck(yylex, 2)}
			stmt.Op = NEQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			temp := []string{yyDollar[1].str}
			yyVAL.expr = &ListLiteral{Vals: temp}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyDollar[3].expr.(*ListLiteral).Vals = append(yyDollar[3].expr.(*ListLiteral).Vals, yyDollar[1].str)
			yyVAL.expr = yyDollar[3].expr
			depthCheck(yylex, yyVAL.expr.Depth())
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2786
		{
			yyVAL.stmt = &ExplainStatement{
				Statement: yyDollar[3].stmt.(*SelectStatement),
				Analyze:   true,
				depth:     depthCheck(yylex, 1+yyDollar[3].stmt.Depth()),
			}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2794
		{
			yyVAL.stmt = &ExplainStatement{
				Statement: yyDollar[2].stmt.(*SelectStatement),
				Analyze:   false,
				depth:     depthCheck(yylex, 1+yyDollar[2].stmt.Depth()),
			}
		}
	case 337:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2805
		{
			yyVAL.stmt = &ShowTagKeyCardinalityStatement{
				Database:   yyDollar[6].str,
				Exact:      true,
				Sources:    yyDollar[7].sources.sources,
				Condition:  yyDollar[8].expr,
				Dimensions: yyDollar[9].dimens.dims,
				Limit:      yyDollar[10].intSlice[0],
				Offset:     yyDollar[10].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[7].sources, yyDollar[8].expr, yyDollar[9].dimens)),
			}
		}
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2818
		{
			yyVAL.stmt = &ShowTagKeyCardinalityStatement{
				Database:   yyDollar[6].str,
				Exact:      true,
				Condition:  yyDollar[7].expr,
				Dimensions: yyDollar[8].dimens.dims,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[7].expr, yyDollar[8].dimens)),
			}
		}
	case 339:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2830
		{
			yyVAL.stmt = &ShowTagKeyCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      false,
				Sources:    yyDollar[6].sources.sources,
				Condition:  yyDollar[7].expr,
				Dimensions: yyDollar[8].dimens.dims,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].sources, yyDollar[7].expr, yyDollar[8].dimens)),
			}
		}
	case 340:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2843
		{
			yyVAL.stmt = &ShowTagKeyCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      true,
				Condition:  yyDollar[6].expr,
				Dimensions: yyDollar[7].dimens.dims,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].expr, yyDollar[7].dimens)),
			}
		}
	case 341:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:2860
		{
			stmt_temp := yyDollar[10].stmt.(*ShowTagValuesStatement)
			yyVAL.stmt = &ShowTagValuesCardinalityStatement{
				Database:        yyDollar[6].str,
				Exact:           true,
				Sources:         yyDollar[7].sources.sources,
				Op:              stmt_temp.Op,
				TagKeyExpr:      stmt_temp.TagKeyExpr,
				Condition:       yyDollar[11].expr,
				Dimensions:      yyDollar[12].dimens.dims,
				Limit:           yyDollar[13].intSlice[0],
				Offset:          yyDollar[13].intSlice[1],
				TagKeyCondition: nil,
				depth:           depthCheck(yylex, 1+max(1+stmt_temp.TagKeyExpr.Depth(), maxDepth(yyDollar[7].sources, yyDollar[11].expr, yyDollar[12].dimens))),
			}

		}
	case 342:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2878
		{
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			yyVAL.stmt = &ShowTagValuesCardinalityStatement{
				Database:        yyDollar[6].str,
				Exact:           true,
				Op:              stmt_temp.Op,
				TagKeyExpr:      stmt_temp.TagKeyExpr,
				Condition:       yyDollar[10].expr,
				Dimensions:      yyDollar[11].dimens.dims,
				Limit:           yyDollar[12].intSlice[0],
				Offset:          yyDollar[12].intSlice[1],
				TagKeyCondition: nil,
				depth:           depthCheck(yylex, 1+max(1+stmt_temp.TagKeyExpr.Depth(), maxDepth(yyDollar[10].expr, yyDollar[11].dimens))),
			}
		}
	case 343:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2894
		{
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			yyVAL.stmt = &ShowTagValuesCardinalityStatement{
				Database:        yyDollar[5].str,
				Exact:           false,
				Sources:         yyDollar[6].sources.sources,
				Op:              stmt_temp.Op,
				TagKeyExpr:      stmt_temp.TagKeyExpr,
				Condition:       yyDollar[10].expr,
				Dimensions:      yyDollar[11].dimens.dims,
				Limit:           yyDollar[12].intSlice[0],
				Offset:          yyDollar[12].intSlice[1],
				TagKeyCondition: nil,
				depth:           depthCheck(yylex, 1+max(1+stmt_temp.TagKeyExpr.Depth(), maxDepth(yyDollar[6].sources, yyDollar[10].expr, yyDollar[11].dimens))),
			}
		}
	case 344:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2911
		{
			stmt_temp := yyDollar[8].stmt.(*ShowTagValuesStatement)
			yyVAL.stmt = &ShowTagValuesCardinalityStatement{
				Database:        yyDollar[5].str,
				Exact:           true,
				Op:              stmt_temp.Op,
				TagKeyExpr:      stmt_temp.TagKeyExpr,
				Condition:       yyDollar[9].expr,
				Dimensions:      yyDollar[10].dimens.dims,
				Limit:           yyDollar[11].intSlice[0],
				Offset:          yyDollar[11].intSlice[1],
				TagKeyCondition: nil,
				depth:           depthCheck(yylex, 1+max(1+stmt_temp.TagKeyExpr.Depth(), maxDepth(yyDollar[9].expr, yyDollar[10].dimens))),
			}
		}
	case 345:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2930
		{
			yyVAL.stmt = &ShowFieldKeyCardinalityStatement{
				Database:   yyDollar[6].str,
				Exact:      true,
				Sources:    yyDollar[7].sources.sources,
				Condition:  yyDollar[8].expr,
				Dimensions: yyDollar[9].dimens.dims,
				Limit:      yyDollar[10].intSlice[0],
				Offset:     yyDollar[10].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[7].sources, yyDollar[8].expr, yyDollar[9].dimens)),
			}
		}
	case 346:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2943
		{
			yyVAL.stmt = &ShowFieldKeyCardinalityStatement{
				Database:   yyDollar[6].str,
				Exact:      true,
				Condition:  yyDollar[7].expr,
				Dimensions: yyDollar[8].dimens.dims,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[7].expr, yyDollar[8].dimens)),
			}
		}
	case 347:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2955
		{
			yyVAL.stmt = &ShowFieldKeyCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      false,
				Sources:    yyDollar[6].sources.sources,
				Condition:  yyDollar[7].expr,
				Dimensions: yyDollar[8].dimens.dims,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].sources, yyDollar[7].expr, yyDollar[8].dimens)),
			}
		}
	case 348:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2968
		{
			yyVAL.stmt = &ShowFieldKeyCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      true,
				Condition:  yyDollar[6].expr,
				Dimensions: yyDollar[7].dimens.dims,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].expr, yyDollar[7].dimens)),
			}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2983
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			if yyDollar[5].cmOption.NumOfShards != 0 && yyDollar[5].cmOption.Type == "range" {
				yylex.Error("Not support to set num-of-shards for range sharding")
			}
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.NumOfShards = yyDollar[5].cmOption.NumOfShards
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.EngineType = yyDollar[5].cmOption.EngineType
			stmt.TTL = yyDollar[5].cmOption.TTL
			yyVAL.stmt = stmt
			depthCheck(yylex, yyVAL.stmt.Depth())
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3007
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}

			// check if PrimaryKey & SortKey is IN Tags/Fields/time
			for _, key := range yyDollar[5].cmOption.PrimaryKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid PrimaryKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			for _, key := range yyDollar[5].cmOption.SortKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid SortKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			// check if ShardKey is IN Tags/Fields
			for _, key := range yyDollar[5].cmOption.ShardKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField {
					yylex.Error("Invalid ShardKey")
					return 1
				}
			}
			// check if primary key is left prefix of sort key
			if len(yyDollar[5].cmOption.PrimaryKey) > len(yyDollar[5].cmOption.SortKey) {
				yylex.Error("PrimaryKey should be left prefix of SortKey")
				return 1
			}
			for i, v := range yyDollar[5].cmOption.PrimaryKey {
				if v != yyDollar[5].cmOption.SortKey[i] {
					yylex.Error("PrimaryKey should be left prefix of SortKey")
					return 1
				}
			}
			// check if indexlist of secondary is IN Tags/Fields
			for i := range yyDollar[5].cmOption.IndexType {
				indextype := yyDollar[5].cmOption.IndexType[i]
				if indextype == "timecluster" {
					continue
				}
				indexlist := yyDollar[5].cmOption.IndexList[i]
				for _, col := range indexlist {
					_, inTag := stmt.Tags[col]
					_, inField := stmt.Fields[col]
					if !inTag && !inField {
						yylex.Error("Invalid indexlist")
					}
				}
			}
			if yyDollar[5].cmOption.NumOfShards != 0 && yyDollar[5].cmOption.Type == "range" {
				yylex.Error("Not support to set num-of-shards for range sharding")
			}

			stmt.EngineType = yyDollar[5].cmOption.EngineType
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.TimeClusterDuration = yyDollar[5].cmOption.TimeClusterDuration
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.NumOfShards = yyDollar[5].cmOption.NumOfShards
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.PrimaryKey = yyDollar[5].cmOption.PrimaryKey
			stmt.SortKey = yyDollar[5].cmOption.SortKey
			stmt.Property = yyDollar[5].cmOption.Property
			stmt.CompactType = yyDollar[5].cmOption.CompactType
			yyVAL.stmt = stmt
			depthCheck(yylex, yyVAL.stmt.Depth())
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			option := &CreateMeasurementStatementOption{}
			option.Type = "hash"
			option.EngineType = "tsstore"
			yyVAL.cmOption = option
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3105
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.NumOfShards = yyDollar[5].int64
			option.Type = yyDollar[6].str
			option.EngineType = yyDollar[2].str
			option.TTL = yyDollar[7].tdur
			yyVAL.cmOption = option
		}
	case 353:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3123
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
				option.TimeClusterDuration = yyDollar[3].indexType.timeClusterDuration
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.NumOfShards = yyDollar[5].int64
			option.Type = yyDollar[6].str
			option.EngineType = yyDollar[2].str
			if yyDollar[7].strSlice != nil {
				option.PrimaryKey = yyDollar[7].strSlice
			} else if yyDollar[8].strSlice != nil {
				option.PrimaryKey = yyDollar[8].strSlice
			}

			if yyDollar[8].strSlice != nil {
				option.SortKey = yyDollar[8].strSlice
			} else if yyDollar[7].strSlice != nil {
				option.SortKey = yyDollar[7].strSlice
			}
			if yyDollar[9].strSlices != nil {
				option.Property = yyDollar[9].strSlices
			}
			option.CompactType = yyDollar[10].str
			yyVAL.cmOption = option
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.indexType = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3159
		{
			validIndexType := map[string]struct{}{}
			validIndexType["text"] = struct{}{}
			validIndexType["field"] = struct{}{}
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				for _, indexType := range yyDollar[2].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for TSSTORE")
					}
				}
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3176
		{
			yyVAL.indexType = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3180
		{
			validIndexType := map[string]struct{}{}
			validIndexType["bloomfilter"] = struct{}{}
			validIndexType["bloomfilter_ip"] = struct{}{}
			validIndexType["minmax"] = struct{}{}
			validIndexType["text"] = struct{}{}
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				for _, indexType := range yyDollar[2].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for COLUMNSTORE")
					}
				}
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3198
		{
			indexType := strings.ToLower(yyDollar[2].str)
			if indexType != "timecluster" {
				yylex.Error("expect TIMECLUSTER for INDEXTYPE")
				return 1
			}
			indextype := &IndexType{
				types:               []string{indexType},
				lists:               [][]string{{"time"}},
				timeClusterDuration: yyDollar[4].tdur,
			}
			validIndexType := map[string]struct{}{}
			validIndexType["bloomfilter"] = struct{}{}
			validIndexType["bloomfilter_ip"] = struct{}{}
			validIndexType["minmax"] = struct{}{}
			if yyDollar[6].indexType == nil {
				yyVAL.indexType = indextype
			} else {
				for _, indexType := range yyDollar[6].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for COLUMNSTORE")
					}
				}
				indextype.types = append(indextype.types, yyDollar[6].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[6].indexType.lists...)
				yyVAL.indexType = indextype
				depthCheck(yylex, max(len(yyVAL.indexType.types), len(yyVAL.indexType.lists)))
			}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3229
		{
			yyVAL.strSlice = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3233
		{
			shardKey := yyDollar[2].strSlice
			sort.Strings(shardKey)
			yyVAL.strSlice = shardKey
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3240
		{
			yyVAL.tdur = time.Duration(0)
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.tdur = yyDollar[2].tdur
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			yyVAL.int64 = 0
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3253
		{
			yyVAL.int64 = -1
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3257
		{
			if yyDollar[2].int64 == 0 {
				yylex.Error("syntax error: NUM OF SHARDS SHOULD LARGER THAN 0")
			}
			yyVAL.int64 = yyDollar[2].int64
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = "tsstore" // default engine type
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.str = "tsstore"
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.str = "columnstore"
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3280
		{
			yyVAL.strSlice = nil
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			yyVAL.strSlice = nil
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3291
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3296
		{
			yyVAL.strSlices = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3304
		{
			yyVAL.str = "row"
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3308
		{
			compactionType := strings.ToLower(yyDollar[2].str)
			if compactionType != "row" && compactionType != "block" {
				yylex.Error("expect ROW or BLOCK for COMPACT type")
				return 1
			}
			yyVAL.str = compactionType
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3319
		{
			stmt := &CreateMeasurementStatement{
				Tags:   make(map[string]int32),
				Fields: make(map[string]int32),
			}
			for i := range yyDollar[2].fieldOptions {
				fType := yyDollar[2].fieldOptions[i].tagOrField
				if fType == "tag" {
					stmt.Tags[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Tag
				} else if fType == "field" {
					fieldType := strings.ToLower(yyDollar[2].fieldOptions[i].fieldType)
					fieldName := yyDollar[2].fieldOptions[i].fieldName
					if fieldType == "int64" {
						stmt.Fields[fieldName] = influx.Field_Type_Int
					} else if fieldType == "float64" {
						stmt.Fields[fieldName] = influx.Field_Type_Float
					} else if fieldType == "string" {
						stmt.Fields[fieldName] = influx.Field_Type_String
					} else if fieldType == "bool" {
						stmt.Fields[fieldName] = influx.Field_Type_Boolean
					} else {
						yylex.Error("expect FLOAT64, INT64, BOOL, STRING for column data type")
						return 1 // syntax error
					}
				}
			}
			yyVAL.stmt = stmt
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3348
		{
			yyVAL.stmt = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3354
		{
			fields := []*fieldList{yyDollar[1].fieldOption}
			yyVAL.fieldOptions = append(fields, yyDollar[2].fieldOptions...)
			depthCheck(yylex, len(yyVAL.fieldOptions))
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.fieldOptions = []*fieldList{yyDollar[1].fieldOption}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3367
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3372
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3378
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  "string",
				tagOrField: "tag",
			}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3387
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3396
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3405
		{
			yyVAL.indexType = nil
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.indexType = yyDollar[1].indexType
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.indexType = yyDollar[1].indexType
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3421
		{
			indextype := yyDollar[1].indexType
			indextype.types = append(indextype.types, yyDollar[2].indexType.types...)
			indextype.lists = append(indextype.lists, yyDollar[2].indexType.lists...)
			yyVAL.indexType = indextype
			depthCheck(yylex, max(len(yyVAL.indexType.types), len(yyVAL.indexType.lists)))
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3431
		{
			yyVAL.indexType = &IndexType{
				types: []string{yyDollar[1].str},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3439
		{
			yyVAL.indexType = &IndexType{
				types: []string{"field"},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3452
		{

			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
			depthCheck(yylex, len(yyVAL.strSlice))
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3460
		{
			shardType := strings.ToLower(yyDollar[2].str)
			if shardType != "hash" && shardType != "range" {
				yylex.Error("expect HASH or RANGE for TYPE")
				return 1
			}
			yyVAL.str = shardType
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3469
		{
			yyVAL.str = "hash"
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3475
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3481
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3487
		{
			yyVAL.strSlices = yyDollar[2].strSlices
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3492
		{
			yyVAL.strSlices = nil
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3498
		{
			m := yyDollar[1].strSlices
			m[0] = append(m[0], yyDollar[3].strSlices[0]...)
			m[1] = append(m[1], yyDollar[3].strSlices[1]...)
			yyVAL.strSlices = m
			depthCheck(yylex, max(len(m[0]), len(m[1])))
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3513
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {yyDollar[3].str}}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3518
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {fmt.Sprintf("%d", yyDollar[3].int64)}}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3528
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
			depthCheck(yylex, len(yyVAL.strSlice))
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.str = yyDollar[1].str
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3540
		{
			stmt := &DropShardStatement{}
			stmt.ID = uint64(yyDollar[3].int64)
			yyVAL.stmt = stmt
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3548
		{
			stmt := &SetPasswordUserStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3559
		{
			stmt := &ShowGrantsForUserStatement{}
			stmt.Name = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 410:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3567
		{
			yyVAL.stmt = &ShowMeasurementCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      true,
				Sources:    yyDollar[6].sources.sources,
				Condition:  yyDollar[7].expr,
				Dimensions: yyDollar[8].dimens.dims,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].sources, yyDollar[7].expr, yyDollar[8].dimens)),
			}
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3580
		{
			yyVAL.stmt = &ShowMeasurementCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      true,
				Condition:  yyDollar[6].expr,
				Dimensions: yyDollar[7].dimens.dims,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].expr, yyDollar[7].dimens)),
			}
		}
	case 412:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3592
		{
			yyVAL.stmt = &ShowMeasurementCardinalityStatement{
				Database:   yyDollar[4].str,
				Exact:      false,
				Sources:    yyDollar[5].sources.sources,
				Condition:  yyDollar[6].expr,
				Dimensions: yyDollar[7].dimens.dims,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].sources, yyDollar[6].expr, yyDollar[7].dimens)),
			}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3605
		{
			yyVAL.stmt = &ShowMeasurementCardinalityStatement{
				Database:   yyDollar[4].str,
				Exact:      false,
				Condition:  yyDollar[5].expr,
				Dimensions: yyDollar[6].dimens.dims,
				Limit:      yyDollar[7].intSlice[0],
				Offset:     yyDollar[7].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].expr, yyDollar[6].dimens)),
			}
		}
	case 414:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3620
		{
			yyVAL.stmt = &ShowSeriesCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      true,
				Sources:    yyDollar[6].sources.sources,
				Condition:  yyDollar[7].expr,
				Dimensions: yyDollar[8].dimens.dims,
				Limit:      yyDollar[9].intSlice[0],
				Offset:     yyDollar[9].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].sources, yyDollar[7].expr, yyDollar[8].dimens)),
			}
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3633
		{
			yyVAL.stmt = &ShowSeriesCardinalityStatement{
				Database:   yyDollar[5].str,
				Exact:      true,
				Condition:  yyDollar[6].expr,
				Dimensions: yyDollar[7].dimens.dims,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[6].expr, yyDollar[7].dimens)),
			}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3645
		{
			yyVAL.stmt = &ShowSeriesCardinalityStatement{
				Database:   yyDollar[4].str,
				Exact:      false,
				Sources:    yyDollar[5].sources.sources,
				Condition:  yyDollar[6].expr,
				Dimensions: yyDollar[7].dimens.dims,
				Limit:      yyDollar[8].intSlice[0],
				Offset:     yyDollar[8].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].sources, yyDollar[6].expr, yyDollar[7].dimens)),
			}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3658
		{
			yyVAL.stmt = &ShowSeriesCardinalityStatement{
				Database:   yyDollar[4].str,
				Exact:      false,
				Condition:  yyDollar[5].expr,
				Dimensions: yyDollar[6].dimens.dims,
				Limit:      yyDollar[7].intSlice[0],
				Offset:     yyDollar[7].intSlice[1],
				depth:      depthCheck(yylex, 1+maxDepth(yyDollar[5].expr, yyDollar[6].dimens)),
			}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3673
		{
			stmt := &ShowShardsStatement{}
			yyVAL.stmt = stmt
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3678
		{
			stmt := &ShowShardsStatement{mstInfo: yyDollar[4].ment}
			yyVAL.stmt = stmt
		}
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3686
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3697
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3711
		{
			stmt := &ShowShardGroupsStatement{}
			yyVAL.stmt = stmt
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3718
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[3].str
			stmt.RpName = ""
			yyVAL.stmt = stmt
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3725
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[5].str
			stmt.RpName = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 425:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3735
		{
			stmt := &CreateContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
				Source:   yyDollar[9].stmt.(*SelectStatement),
				depth:    depthCheck(yylex, 1+yyDollar[9].stmt.Depth()),
			}
			if yyDollar[7].cqsp != nil {
				stmt.ResampleEvery = yyDollar[7].cqsp.ResampleEvery
				stmt.ResampleFor = yyDollar[7].cqsp.ResampleFor
			}
			yyVAL.stmt = stmt
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3751
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
			}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3757
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleFor: yyDollar[3].tdur,
			}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3763
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
				ResampleFor:   yyDollar[5].tdur,
			}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3770
		{
			yyVAL.cqsp = nil
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3776
		{
			yyVAL.stmt = &ShowContinuousQueriesStatement{}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3782
		{
			yyVAL.stmt = &DropContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
			}
		}
	case 432:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3790
		{
			stmt := yyDollar[9].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[4].str
			stmt.Ops = yyDollar[6].fields.fields
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+yyDollar[6].fields.Depth()))
			yyVAL.stmt = stmt
		}
	case 433:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:3798
		{
			stmt := yyDollar[11].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[6].str
			stmt.DbName = yyDollar[4].str
			stmt.Ops = yyDollar[8].fields.fields
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+yyDollar[8].fields.Depth()))
			yyVAL.stmt = stmt
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3807
		{
			stmt := yyDollar[7].stmt.(*CreateDownSampleStatement)
			stmt.Ops = yyDollar[4].fields.fields
			stmt.depth = depthCheck(yylex, max(stmt.depth, 1+yyDollar[4].fields.Depth()))
			yyVAL.stmt = stmt
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3816
		{
			yyVAL.fields = fieldsList{fields: []*Field{yyDollar[1].field}, depth: depthCheck(yylex, 1+yyDollar[1].field.Depth())}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3820
		{
			fl := yyDollar[1].fields
			fl.fields = append(fl.fields, yyDollar[3].field)
			fl.depth = depthCheck(yylex, max(fl.depth, len(fl.fields)+yyDollar[3].field.Depth()))
			yyVAL.fields = fl
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3829
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, depth: depthCheck(yylex, 1+yyDollar[1].expr.Depth())}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3836
		{
			yyVAL.stmt = &DropDownSampleStatement{
				RpName: yyDollar[4].str,
			}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3842
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName: yyDollar[4].str,
				RpName: yyDollar[6].str,
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3849
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DropAll: true,
			}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3855
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName:  yyDollar[4].str,
				DropAll: true,
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3864
		{
			yyVAL.stmt = &ShowDownSampleStatement{}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3868
		{
			yyVAL.stmt = &ShowDownSampleStatement{
				DbName: yyDollar[4].str,
			}
		}
	case 444:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3876
		{
			yyVAL.stmt = &CreateDownSampleStatement{
				Duration:       yyDollar[2].tdur,
				SampleInterval: yyDollar[5].tdurs,
				TimeInterval:   yyDollar[9].tdurs,
				depth:          depthCheck(yylex, 1+max(len(yyDollar[5].tdurs), len(yyDollar[9].tdurs))),
			}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3887
		{
			yyVAL.tdurs = []time.Duration{yyDollar[1].tdur}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3891
		{
			yyVAL.tdurs = append(yyDollar[1].tdurs, yyDollar[3].tdur)
			depthCheck(yylex, len(yyVAL.tdurs))
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3898
		{
			yyDollar[5].ment.IsTarget = true
			stmt := &CreateStreamStatement{
				Name: yyDollar[3].str,
				Target: &Target{
					Measurement: yyDollar[5].ment,
					depth:       depthCheck(yylex, 2),
				},
				Query: yyDollar[7].stmt,
				Delay: yyDollar[8].tdur,
				depth: depthCheck(yylex, 1+max(3, yyDollar[7].stmt.Depth())),
			}
			yyVAL.stmt = stmt
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3914
		{
			yyVAL.tdur = time.Duration(0)
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3918
		{
			yyVAL.tdur = yyDollar[2].tdur
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3924
		{
			yyVAL.stmt = &ShowStreamsStatement{}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3928
		{
			yyVAL.stmt = &ShowStreamsStatement{Database: yyDollar[4].str}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3934
		{
			yyVAL.stmt = &DropStreamsStatement{Name: yyDollar[3].str}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3939
		{
			yyVAL.stmt = &ShowQueriesStatement{}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3944
		{
			yyVAL.stmt = &KillQueryStatement{QueryID: uint64(yyDollar[3].int64)}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3950
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3954
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
			depthCheck(yylex, len(yyVAL.strSlice))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3961
		{
			yyVAL.str = "ALL"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3965
		{
			yyVAL.str = "ANY"
		}
	case 459:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3971
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str, Destinations: yyDollar[10].strSlice, Mode: yyDollar[9].str}
		}
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3975
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: "", Destinations: yyDollar[8].strSlice, Mode: yyDollar[7].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3981
		{
			yyVAL.stmt = &ShowSubscriptionsStatement{}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3987
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: "", RetentionPolicy: ""}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3991
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 464:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3995
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3999
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4005
		{
			stmt := &ShowConfigsStatement{}
			yyVAL.stmt = stmt
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4012
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4020
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].int64
			yyVAL.stmt = stmt
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4028
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].float64
			yyVAL.stmt = stmt
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4036
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4044
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4054
		{
			stmt := &ShowClusterStatement{}
			stmt.NodeID = 0
			yyVAL.stmt = stmt
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4060
		{
			stmt := &ShowClusterStatement{}
			stmt.NodeID = 0
			if strings.ToLower(yyDollar[4].str) == "nodetype" {
				stmt.NodeType = yyDollar[6].str
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4071
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodeid" {
				stmt.NodeID = yyDollar[6].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 475:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:4081
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodeid" {
				stmt.NodeID = yyDollar[6].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			if strings.ToLower(yyDollar[8].str) == "nodetype" {
				stmt.NodeType = yyDollar[10].str
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 476:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:4096
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodetype" {
				stmt.NodeType = yyDollar[6].str
			} else {
				yylex.Error("Invalid where clause")
			}
			if strings.ToLower(yyDollar[8].str) == "nodeid" {
				stmt.NodeID = yyDollar[10].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4113
		{
			yyVAL.ctes = ctesList{ctes: []*CTE{yyDollar[1].cte}, depth: depthCheck(yylex, 2+yyDollar[1].cte.Depth())}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4117
		{
			cl := yyDollar[1].ctes
			cl.ctes = append(cl.ctes, yyDollar[3].cte)
			cl.depth = depthCheck(yylex, max(cl.depth, len(cl.ctes)+1+yyDollar[3].cte.Depth()))
			yyVAL.ctes = cl
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4126
		{
			cte := &CTE{
				Alias: yyDollar[1].str,
				depth: depthCheck(yylex, 1),
			}
			if selectStatement, ok := yyDollar[3].stmt.(*SelectStatement); ok {
				cte.Query = selectStatement
				cte.depth = depthCheck(yylex, max(cte.depth, 1+cte.Query.Depth()))
			} else if graphStatement, ok := yyDollar[3].stmt.(*GraphStatement); ok {
				cte.GraphQuery = graphStatement
				cte.depth = depthCheck(yylex, max(cte.depth, 1+cte.GraphQuery.Depth()))
			} else {
				yylex.Error("Invalid stmt clause in cte.query")
			}
			yyVAL.cte = cte
		}
	}
	goto yystack /* stack new state and value */
}
