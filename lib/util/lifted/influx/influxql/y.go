// Code generated by goyacc sql.y. DO NOT EDIT.

//line sql.y:2
// Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package influxql

import __yyfmt__ "fmt"

//line sql.y:16

import (
	"fmt"
	"regexp"
	"sort"
	"strings"
	"time"

	"github.com/openGemini/openGemini/lib/util/lifted/vm/protoparser/influx"
)

const DefaultQueryTimeout = time.Duration(0)

func setParseTree(yylex interface{}, stmts Statements) {
	for _, stmt := range stmts {
		yylex.(*YyParser).Query.Statements = append(yylex.(*YyParser).Query.Statements, stmt)
	}
}

func deal_Fill(fill interface{}) (FillOption, interface{}, bool) {
	switch fill.(type) {
	case string:
		switch fill {
		case "null":
			return 0, nil, true
		case "none":
			return 1, nil, true
		case "previous":
			return 3, nil, true
		case "linear":
			return 4, nil, true
		default:
			return -1, nil, false
		}
	case int64:
		return 2, fill.(int64), true
	case float64:
		return 2, fill.(float64), true
	default:
		return -1, nil, false
	}
}

//line sql.y:63
type yySymType struct {
	yys              int
	stmt             Statement
	stmts            Statements
	str              string
	query            Query
	field            *Field
	fields           Fields
	sources          Sources
	source           Source
	sortfs           SortFields
	sortf            *SortField
	ment             *Measurement
	subQuery         *SubQuery
	dimens           Dimensions
	dimen            *Dimension
	int              int
	int64            int64
	float64          float64
	dataType         DataType
	expr             Expr
	tdur             time.Duration
	tdurs            []time.Duration
	bool             bool
	groupByCondition *GroupByCondition
	intSlice         []int
	inter            interface{}
	durations        *Durations
	hints            Hints
	strSlice         []string
	strSlices        [][]string
	location         *time.Location
	indexType        *IndexType
	cqsp             *cqSamplePolicyInfo
	fieldOption      *fieldList
	fieldOptions     []*fieldList
	indexOptions     []*IndexOption
	indexOption      *IndexOption
	databasePolicy   DatabasePolicy
	cmOption         *CreateMeasurementStatementOption
}

const FROM = 57346
const MEASUREMENT = 57347
const INTO = 57348
const ON = 57349
const SELECT = 57350
const WHERE = 57351
const AS = 57352
const GROUP = 57353
const BY = 57354
const ORDER = 57355
const LIMIT = 57356
const OFFSET = 57357
const SLIMIT = 57358
const SOFFSET = 57359
const SHOW = 57360
const CREATE = 57361
const FULL = 57362
const PRIVILEGES = 57363
const OUTER = 57364
const JOIN = 57365
const TO = 57366
const IN = 57367
const NOT = 57368
const EXISTS = 57369
const REVOKE = 57370
const FILL = 57371
const DELETE = 57372
const WITH = 57373
const ENGINETYPE = 57374
const COLUMNSTORE = 57375
const TSSTORE = 57376
const ALL = 57377
const ANY = 57378
const PASSWORD = 57379
const NAME = 57380
const REPLICANUM = 57381
const ALTER = 57382
const USER = 57383
const USERS = 57384
const DATABASES = 57385
const DATABASE = 57386
const MEASUREMENTS = 57387
const RETENTION = 57388
const POLICIES = 57389
const POLICY = 57390
const DURATION = 57391
const DEFAULT = 57392
const SHARD = 57393
const INDEX = 57394
const GRANT = 57395
const HOT = 57396
const WARM = 57397
const TYPE = 57398
const SET = 57399
const FOR = 57400
const GRANTS = 57401
const REPLICATION = 57402
const SERIES = 57403
const DROP = 57404
const CASE = 57405
const WHEN = 57406
const THEN = 57407
const ELSE = 57408
const BEGIN = 57409
const END = 57410
const TRUE = 57411
const FALSE = 57412
const TAG = 57413
const ATTRIBUTE = 57414
const FIELD = 57415
const KEYS = 57416
const VALUES = 57417
const KEY = 57418
const EXPLAIN = 57419
const ANALYZE = 57420
const EXACT = 57421
const CARDINALITY = 57422
const SHARDKEY = 57423
const PRIMARYKEY = 57424
const SORTKEY = 57425
const PROPERTY = 57426
const COMPACT = 57427
const CONTINUOUS = 57428
const DIAGNOSTICS = 57429
const QUERIES = 57430
const QUERIE = 57431
const SHARDS = 57432
const STATS = 57433
const SUBSCRIPTIONS = 57434
const SUBSCRIPTION = 57435
const GROUPS = 57436
const INDEXTYPE = 57437
const INDEXLIST = 57438
const SEGMENT = 57439
const KILL = 57440
const EVERY = 57441
const RESAMPLE = 57442
const DOWNSAMPLE = 57443
const DOWNSAMPLES = 57444
const SAMPLEINTERVAL = 57445
const TIMEINTERVAL = 57446
const STREAM = 57447
const DELAY = 57448
const STREAMS = 57449
const QUERY = 57450
const PARTITION = 57451
const TOKEN = 57452
const TOKENIZERS = 57453
const MATCH = 57454
const LIKE = 57455
const MATCHPHRASE = 57456
const CONFIG = 57457
const CONFIGS = 57458
const CLUSTER = 57459
const IPINRANGE = 57460
const REPLICAS = 57461
const DETAIL = 57462
const DESTINATIONS = 57463
const SCHEMA = 57464
const INDEXES = 57465
const AUTO = 57466
const EXCEPT = 57467
const DESC = 57468
const ASC = 57469
const COMMA = 57470
const SEMICOLON = 57471
const LPAREN = 57472
const RPAREN = 57473
const REGEX = 57474
const EQ = 57475
const NEQ = 57476
const LT = 57477
const LTE = 57478
const GT = 57479
const GTE = 57480
const DOT = 57481
const DOUBLECOLON = 57482
const NEQREGEX = 57483
const EQREGEX = 57484
const IDENT = 57485
const INTEGER = 57486
const DURATIONVAL = 57487
const STRING = 57488
const NUMBER = 57489
const HINT = 57490
const BOUNDPARAM = 57491
const AND = 57492
const OR = 57493
const ADD = 57494
const SUB = 57495
const BITWISE_OR = 57496
const BITWISE_XOR = 57497
const MUL = 57498
const DIV = 57499
const MOD = 57500
const BITWISE_AND = 57501
const UMINUS = 57502

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"MEASUREMENT",
	"INTO",
	"ON",
	"SELECT",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"SLIMIT",
	"SOFFSET",
	"SHOW",
	"CREATE",
	"FULL",
	"PRIVILEGES",
	"OUTER",
	"JOIN",
	"TO",
	"IN",
	"NOT",
	"EXISTS",
	"REVOKE",
	"FILL",
	"DELETE",
	"WITH",
	"ENGINETYPE",
	"COLUMNSTORE",
	"TSSTORE",
	"ALL",
	"ANY",
	"PASSWORD",
	"NAME",
	"REPLICANUM",
	"ALTER",
	"USER",
	"USERS",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"RETENTION",
	"POLICIES",
	"POLICY",
	"DURATION",
	"DEFAULT",
	"SHARD",
	"INDEX",
	"GRANT",
	"HOT",
	"WARM",
	"TYPE",
	"SET",
	"FOR",
	"GRANTS",
	"REPLICATION",
	"SERIES",
	"DROP",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"BEGIN",
	"END",
	"TRUE",
	"FALSE",
	"TAG",
	"ATTRIBUTE",
	"FIELD",
	"KEYS",
	"VALUES",
	"KEY",
	"EXPLAIN",
	"ANALYZE",
	"EXACT",
	"CARDINALITY",
	"SHARDKEY",
	"PRIMARYKEY",
	"SORTKEY",
	"PROPERTY",
	"COMPACT",
	"CONTINUOUS",
	"DIAGNOSTICS",
	"QUERIES",
	"QUERIE",
	"SHARDS",
	"STATS",
	"SUBSCRIPTIONS",
	"SUBSCRIPTION",
	"GROUPS",
	"INDEXTYPE",
	"INDEXLIST",
	"SEGMENT",
	"KILL",
	"EVERY",
	"RESAMPLE",
	"DOWNSAMPLE",
	"DOWNSAMPLES",
	"SAMPLEINTERVAL",
	"TIMEINTERVAL",
	"STREAM",
	"DELAY",
	"STREAMS",
	"QUERY",
	"PARTITION",
	"TOKEN",
	"TOKENIZERS",
	"MATCH",
	"LIKE",
	"MATCHPHRASE",
	"CONFIG",
	"CONFIGS",
	"CLUSTER",
	"IPINRANGE",
	"REPLICAS",
	"DETAIL",
	"DESTINATIONS",
	"SCHEMA",
	"INDEXES",
	"AUTO",
	"EXCEPT",
	"DESC",
	"ASC",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"REGEX",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"DOT",
	"DOUBLECOLON",
	"NEQREGEX",
	"EQREGEX",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"NUMBER",
	"HINT",
	"BOUNDPARAM",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"BITWISE_OR",
	"BITWISE_XOR",
	"MUL",
	"DIV",
	"MOD",
	"BITWISE_AND",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3561

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 71,
	4, 93,
	-2, 140,
	-1, 483,
	113, 158,
	133, 158,
	134, 158,
	135, 158,
	136, 158,
	137, 158,
	138, 158,
	141, 158,
	142, 158,
	-2, 146,
}

const yyPrivate = 57344

const yyLast = 1207

var yyAct = [...]int16{
	510, 525, 964, 905, 802, 937, 436, 819, 928, 716,
	830, 402, 738, 770, 720, 268, 524, 730, 864, 4,
	669, 570, 506, 653, 744, 649, 240, 800, 71, 571,
	393, 519, 434, 508, 210, 330, 251, 455, 327, 236,
	2, 238, 155, 745, 746, 696, 175, 747, 736, 234,
	285, 917, 75, 748, 883, 245, 244, 162, 163, 167,
	168, 695, 884, 589, 516, 357, 358, 357, 358, 626,
	140, 164, 165, 169, 166, 162, 163, 167, 168, 164,
	165, 169, 166, 162, 163, 167, 168, 150, 582, 89,
	483, 650, 81, 630, 631, 400, 651, 938, 85, 86,
	511, 158, 239, 218, 89, 217, 974, 901, 218, 357,
	358, 209, 935, 512, 89, 208, 919, 217, 211, 87,
	218, 460, 89, 909, 903, 459, 216, 219, 211, 170,
	874, 174, 873, 593, 817, 217, 211, 230, 218, 232,
	161, 246, 156, 247, 904, 580, 816, 248, 164, 165,
	169, 166, 162, 163, 167, 168, 797, 275, 751, 242,
	276, 89, 701, 700, 207, 699, 698, 217, 628, 263,
	218, 629, 243, 83, 80, 84, 82, 566, 88, 805,
	357, 358, 78, 89, 59, 290, 254, 291, 272, 899,
	209, 563, 564, 886, 208, 252, 756, 211, 805, 222,
	286, 271, 755, 324, 578, 296, 59, 270, 569, 567,
	233, 447, 361, 362, 266, 277, 278, 279, 280, 281,
	282, 283, 284, 294, 295, 520, 521, 225, 551, 147,
	178, 252, 550, 523, 522, 683, 672, 424, 579, 81,
	322, 423, 212, 315, 340, 85, 86, 314, 145, 804,
	968, 298, 906, 831, 180, 303, 900, 289, 772, 341,
	731, 212, 572, 655, 212, 828, 391, 794, 808, 360,
	793, 785, 741, 638, 740, 726, 377, 212, 685, 356,
	355, 684, 164, 165, 169, 166, 162, 163, 167, 168,
	643, 642, 343, 625, 623, 359, 369, 370, 371, 372,
	373, 374, 622, 620, 376, 375, 76, 618, 89, 176,
	604, 603, 602, 597, 595, 407, 581, 171, 212, 77,
	83, 80, 84, 82, 568, 88, 173, 172, 426, 78,
	636, 553, 74, 81, 517, 501, 458, 148, 392, 85,
	86, 731, 500, 468, 670, 671, 398, 497, 184, 496,
	473, 474, 674, 673, 89, 476, 146, 470, 405, 390,
	389, 388, 385, 384, 383, 433, 488, 489, 490, 380,
	378, 461, 348, 406, 347, 346, 410, 412, 344, 415,
	339, 338, 337, 486, 481, 482, 332, 325, 323, 319,
	300, 292, 431, 265, 226, 224, 220, 206, 204, 160,
	76, 475, 89, 477, 605, 491, 591, 601, 505, 531,
	252, 252, 552, 77, 83, 80, 84, 82, 530, 88,
	472, 252, 171, 78, 537, 600, 535, 541, 555, 514,
	464, 173, 172, 462, 422, 345, 299, 554, 336, 465,
	970, 305, 306, 81, 308, 309, 860, 562, 316, 85,
	86, 859, 321, 518, 709, 504, 212, 458, 503, 590,
	432, 835, 587, 975, 834, 588, 953, 515, 565, 940,
	70, 212, 479, 212, 939, 934, 918, 892, 876, 533,
	534, 832, 536, 577, 827, 540, 868, 599, 826, 825,
	823, 822, 549, 596, 586, 592, 732, 594, 728, 558,
	560, 561, 727, 714, 610, 627, 612, 613, 480, 466,
	492, 214, 89, 609, 513, 513, 619, 397, 633, 617,
	871, 967, 913, 77, 83, 80, 84, 82, 607, 88,
	882, 639, 657, 78, 774, 715, 632, 661, 637, 663,
	634, 611, 487, 484, 367, 359, 366, 365, 662, 659,
	660, 363, 666, 652, 335, 354, 686, 739, 667, 408,
	352, 656, 413, 70, 694, 682, 419, 969, 421, 954,
	930, 697, 879, 428, 690, 429, 692, 693, 846, 824,
	212, 758, 212, 759, 760, 182, 635, 139, 616, 615,
	641, 614, 606, 159, 394, 818, 331, 179, 212, 328,
	448, 719, 151, 658, 227, 213, 723, 798, 153, 718,
	960, 877, 713, 813, 869, 733, 734, 735, 680, 681,
	868, 708, 706, 199, 231, 200, 711, 688, 689, 697,
	691, 729, 865, 963, 215, 958, 950, 182, 933, 331,
	801, 494, 644, 645, 329, 317, 318, 427, 312, 313,
	743, 737, 182, 754, 812, 742, 724, 420, 196, 197,
	418, 762, 763, 353, 764, 320, 304, 59, 848, 749,
	753, 779, 778, 544, 761, 547, 765, 678, 351, 122,
	152, 799, 556, 767, 784, 773, 766, 329, 193, 768,
	194, 668, 789, 665, 791, 792, 782, 783, 181, 780,
	189, 190, 191, 543, 787, 788, 307, 790, 710, 310,
	311, 212, 273, 807, 274, 121, 221, 752, 119, 449,
	120, 820, 187, 750, 185, 186, 212, 795, 331, 811,
	3, 910, 188, 640, 399, 806, 293, 149, 861, 178,
	769, 911, 264, 267, 815, 443, 446, 195, 444, 445,
	781, 739, 821, 796, 829, 513, 717, 703, 786, 576,
	123, 575, 574, 841, 573, 253, 223, 126, 205, 183,
	144, 837, 302, 833, 451, 124, 836, 585, 252, 125,
	912, 845, 840, 839, 853, 854, 842, 141, 847, 856,
	857, 142, 858, 775, 776, 59, 364, 852, 814, 849,
	850, 154, 855, 721, 722, 60, 61, 141, 867, 810,
	809, 143, 777, 297, 676, 66, 141, 63, 141, 704,
	677, 664, 598, 866, 875, 870, 542, 64, 454, 404,
	379, 872, 333, 878, 546, 507, 255, 843, 485, 844,
	65, 381, 880, 539, 68, 417, 881, 890, 885, 62,
	256, 851, 621, 257, 897, 888, 889, 898, 382, 396,
	891, 498, 495, 478, 67, 261, 863, 896, 259, 893,
	862, 647, 648, 907, 838, 757, 403, 902, 528, 820,
	820, 395, 260, 908, 269, 69, 914, 915, 526, 527,
	922, 923, 916, 409, 411, 141, 414, 416, 927, 921,
	142, 142, 920, 141, 425, 608, 203, 725, 929, 430,
	925, 926, 403, 887, 59, 157, 157, 239, 142, 529,
	894, 895, 936, 942, 182, 493, 387, 944, 945, 386,
	471, 941, 469, 467, 947, 463, 929, 951, 946, 952,
	943, 450, 350, 349, 342, 955, 59, 301, 262, 258,
	229, 228, 100, 202, 959, 201, 60, 61, 401, 966,
	961, 624, 502, 499, 924, 141, 66, 198, 63, 192,
	966, 973, 972, 971, 584, 81, 583, 453, 64, 114,
	452, 85, 86, 457, 456, 712, 707, 705, 803, 95,
	90, 65, 91, 92, 956, 68, 532, 957, 102, 965,
	62, 538, 948, 931, 949, 932, 99, 545, 93, 548,
	962, 97, 771, 435, 646, 67, 557, 559, 96, 81,
	98, 509, 654, 288, 368, 85, 86, 177, 113, 110,
	111, 112, 117, 103, 79, 106, 69, 101, 250, 107,
	249, 81, 76, 287, 89, 241, 235, 85, 86, 104,
	237, 1, 73, 55, 105, 77, 83, 80, 84, 82,
	54, 88, 53, 108, 109, 78, 58, 57, 74, 115,
	116, 56, 52, 51, 50, 334, 49, 48, 47, 46,
	45, 44, 43, 42, 41, 40, 76, 39, 89, 38,
	118, 37, 36, 35, 34, 94, 33, 32, 31, 77,
	83, 80, 84, 82, 72, 88, 132, 30, 76, 78,
	89, 29, 74, 28, 27, 26, 25, 24, 21, 20,
	22, 77, 83, 80, 84, 82, 19, 88, 23, 18,
	17, 78, 675, 16, 74, 679, 137, 439, 440, 14,
	15, 13, 130, 12, 687, 127, 702, 129, 437, 441,
	443, 446, 131, 444, 445, 7, 11, 10, 9, 438,
	8, 326, 128, 6, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 134, 135, 0, 0, 136,
}

var yyPact = [...]int16{
	938, -1000, 434, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 956,
	947, 674, 1101, 891, 765, 213, 194, 659, 565, 500,
	938, 909, 978, 465, 259, 130, 270, 292, 270, -1000,
	-1000, 166, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	477, 578, 722, 645, 661, -1000, 626, 965, 614, 689,
	579, 963, 529, 537, 948, 946, -1000, -1000, -1000, 897,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 255,
	720, 254, 51, 497, 504, -26, -26, 253, 891, 718,
	252, 83, 251, 496, 944, 943, -26, 532, -26, 892,
	-1000, -28, 29, 717, 51, 829, 942, 861, 941, 906,
	-1000, 684, 250, 70, -1000, 961, 873, -28, 910, 978,
	641, 14, 270, 270, 270, 270, 270, 270, 270, 270,
	-81, 912, 114, 248, -1000, 670, 675, 675, 29, -1000,
	782, 917, 247, 940, 891, 586, 917, 917, 631, 917,
	630, 569, 104, 917, 566, 246, 585, 917, 51, -1000,
	-1000, 245, -26, 244, 568, 243, 801, 424, 299, 239,
	-1000, -1000, -1000, 238, 237, 978, 910, -1000, -1000, 937,
	-1000, 892, -1000, 235, -1000, -1000, 296, 232, 231, 229,
	-1000, 936, 935, -1000, -1000, 550, 535, -1000, -1000, 787,
	-85, -1000, 29, 187, 421, 769, 417, 416, 414, -1000,
	-1000, 163, -73, 227, 799, 226, 834, 221, 220, 219,
	922, 218, 217, -1000, 216, -26, -1000, 892, 469, 869,
	-1000, 961, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -99,
	-99, -99, -1000, -1000, -99, -1000, 386, -1000, -1000, -1000,
	-1000, -1000, -1000, 270, 668, -1000, 30, 953, 863, 798,
	-1000, 215, 892, 863, 917, 891, 891, 917, 891, 814,
	580, 917, 577, 917, 295, 98, 899, 567, 917, -1000,
	917, 891, -1000, -1000, -1000, 327, 525, -1000, 1099, 67,
	481, 647, 934, 737, 797, -26, -18, 294, 928, 300,
	378, 926, -26, -1000, 925, 214, 923, 281, -1000, -26,
	-26, -28, 212, -28, 840, 341, 377, 29, 29, -81,
	-41, 413, 813, 906, 412, -26, -26, -26, 380, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 918, 560,
	838, 206, 204, -1000, 837, 959, 199, 192, -1000, 958,
	325, 322, 873, 806, -43, -43, 892, -1000, -4, 191,
	270, 92, 874, 866, 914, -1000, 863, 874, 891, 892,
	873, 892, 863, 812, 892, 863, 795, 627, 917, 803,
	917, 891, 89, 273, 188, 863, 874, 917, 891, 891,
	892, 873, 48, -1000, -1000, 1099, -1000, 32, 65, 181,
	64, -1000, 119, 715, 713, 712, 710, 657, 60, 95,
	173, -58, -1000, -1000, 745, -1000, -26, 334, -8, 267,
	-10, -1000, -10, 171, 978, 170, 791, 906, 286, 169,
	-1000, 168, 167, -1000, 265, -1000, 464, -1000, -28, 895,
	-1000, -1000, -1000, -1000, 176, 411, 375, 906, 463, 461,
	460, -1000, 29, 164, 119, 160, 828, -1000, 159, 151,
	957, -1000, 150, -77, 24, 469, 863, 410, -1000, 458,
	190, 408, 133, -1000, -1000, 873, -1000, 665, -73, 892,
	148, 147, 222, 222, -1000, 855, -53, -53, 120, 92,
	874, -1000, 892, 873, 873, 874, 863, 874, 790, 617,
	863, 874, 615, 211, 783, 789, 601, 891, 892, 873,
	96, 138, 135, -1000, 874, -1000, 891, 892, 873, 892,
	873, 873, 874, -89, -105, -1000, -1000, -1000, -1000, -1000,
	443, -1000, -1000, 21, 20, 18, 17, -1000, -1000, -1000,
	-1000, 708, 788, 527, 526, 321, -1000, -1000, -1000, -1000,
	635, -10, -1000, -1000, -1000, 512, 372, 405, 707, 503,
	-26, 768, -1000, -1000, -1000, -26, -28, 900, 132, 371,
	367, 198, -1000, 365, -26, -26, -26, -83, 1099, 501,
	-1000, 131, -1000, -1000, 129, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 806, 874, -100, -43, 652, 13, 646, 469,
	-1000, 863, -1000, -1000, -1000, -1000, -1000, 58, 52, 860,
	-1000, -1000, -1000, -1000, 453, 457, -1000, -1000, 873, 874,
	874, -1000, 874, -1000, 600, 211, 874, -1000, 211, 892,
	115, 115, 404, 222, 222, 781, 596, 595, 211, 892,
	873, 873, 874, 128, -1000, -1000, -1000, 892, 873, 873,
	874, 873, 874, 874, -1000, 127, 124, 119, -1000, -1000,
	-1000, -1000, 703, 11, 572, 559, 106, 559, 125, 776,
	-1000, -1000, 662, 555, 767, 978, -1000, 1, -11, 474,
	-26, -1000, -1000, -1000, -1000, 29, -1000, -1000, -1000, 360,
	359, 451, -1000, 358, 357, 353, -1000, -1000, -1000, 122,
	-1000, -1000, 863, 110, 350, -1000, -1000, -1000, -100, -1000,
	-1000, 333, -1000, 806, 874, 857, -1000, -53, 120, -1000,
	-1000, 874, -1000, -1000, -1000, 211, 892, -1000, 892, 863,
	-1000, 450, -1000, -1000, 115, -1000, -1000, 592, 211, 211,
	892, 873, 874, 874, -1000, -1000, 873, 874, 874, -1000,
	874, -1000, -1000, 318, 313, -1000, -1000, 678, 849, 845,
	542, 119, -1000, 106, 524, 518, 542, -1000, 390, -1000,
	-1000, 906, -13, -15, 707, 347, 508, -1000, 768, -1000,
	444, -85, -1000, -1000, 117, -1000, -1000, -1000, -1000, 874,
	-1000, 400, -1000, -1000, -1000, -91, 863, -1000, 49, -1000,
	-1000, -1000, 892, 863, 863, 874, 115, 346, 211, 892,
	892, 873, 874, -1000, -1000, 874, -1000, -1000, -1000, 45,
	113, -37, -1000, -1000, 695, 0, 443, -1000, 109, 109,
	695, -22, 663, 683, -1000, -1000, 749, 392, -26, -26,
	-1000, 110, -95, 345, -29, 874, -1000, 863, 874, 874,
	-1000, -1000, -1000, 892, 873, 873, 874, -1000, -1000, -1000,
	-1000, 694, -1000, -1000, -1000, -1000, 442, -1000, 556, 344,
	-1000, -33, 707, -48, -1000, -1000, -1000, 343, -1000, 338,
	110, 874, -1000, -1000, 873, 874, 874, -1000, -1000, 694,
	109, 553, -1000, 109, 106, -1000, -1000, 335, 441, -1000,
	-1000, -1000, -1000, 874, -1000, -1000, -1000, -1000, 551, -1000,
	109, -1000, -1000, 506, -48, -1000, 548, -1000, -26, -1000,
	391, -1000, -1000, 107, -1000, 439, 307, -48, -1000, -26,
	-38, 332, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 730, 1164, 1163, 1161, 1160, 19, 1158, 1157, 1156,
	1155, 1146, 1143, 1141, 1140, 1139, 1133, 1130, 1129, 1128,
	1126, 1120, 1119, 1118, 1117, 1116, 1115, 20, 1114, 1113,
	1111, 1107, 1098, 1097, 1096, 1094, 1093, 1092, 1091, 1089,
	1087, 1085, 1084, 1083, 1082, 1081, 9, 1080, 1079, 1078,
	1077, 1076, 1075, 1074, 1073, 1072, 1071, 1067, 1066, 1062,
	1060, 1053, 28, 17, 1052, 1051, 40, 587, 49, 39,
	42, 1050, 34, 1046, 41, 31, 70, 1045, 1040, 26,
	1038, 1034, 52, 36, 13, 1027, 46, 1024, 1023, 23,
	11, 1022, 15, 30, 33, 1021, 16, 1, 1014, 22,
	24, 8, 6, 1013, 32, 119, 1012, 254, 12, 29,
	0, 1011, 14, 1010, 21, 27, 3, 1005, 1004, 7,
	1003, 1002, 2, 999, 997, 994, 10, 988, 4, 987,
	986, 985, 5, 25, 18, 35, 984, 983, 37, 38,
	980, 977, 976, 974,
}

var yyR1 = [...]uint8{
	0, 65, 66, 66, 66, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 6, 62, 62, 64, 64, 64, 64, 64,
	64, 86, 86, 85, 63, 63, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 70, 70, 67, 68, 68, 68, 68, 68,
	68, 68, 71, 69, 69, 69, 73, 74, 74, 74,
	74, 74, 72, 72, 72, 92, 92, 93, 93, 94,
	94, 110, 110, 95, 95, 95, 95, 95, 95, 95,
	95, 126, 126, 99, 99, 100, 100, 100, 100, 76,
	76, 78, 78, 77, 77, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 80, 83, 83, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 105, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 88,
	88, 88, 90, 90, 89, 89, 91, 91, 91, 96,
	133, 133, 97, 97, 97, 97, 98, 98, 98, 98,
	2, 2, 3, 3, 139, 139, 139, 139, 139, 135,
	135, 4, 104, 104, 103, 103, 103, 103, 103, 103,
	103, 7, 7, 8, 8, 75, 75, 75, 75, 9,
	9, 10, 10, 5, 5, 5, 11, 11, 101, 101,
	102, 102, 102, 102, 12, 12, 12, 12, 13, 15,
	14, 14, 16, 16, 17, 18, 20, 20, 20, 22,
	22, 21, 21, 21, 23, 23, 19, 24, 24, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 53, 53,
	53, 53, 53, 107, 107, 25, 25, 26, 26, 26,
	26, 27, 27, 27, 27, 27, 84, 84, 106, 28,
	28, 29, 29, 29, 29, 30, 30, 30, 30, 31,
	31, 31, 31, 32, 32, 140, 140, 141, 129, 129,
	130, 130, 130, 115, 115, 134, 134, 134, 142, 142,
	143, 120, 120, 121, 121, 125, 125, 113, 113, 52,
	52, 138, 138, 136, 136, 137, 137, 137, 127, 127,
	128, 128, 116, 116, 108, 108, 117, 118, 122, 122,
	124, 123, 123, 123, 114, 114, 109, 33, 34, 35,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	39, 39, 40, 41, 41, 42, 131, 131, 131, 131,
	43, 44, 45, 45, 45, 47, 47, 47, 47, 48,
	48, 46, 132, 132, 49, 49, 50, 50, 51, 54,
	55, 119, 119, 112, 112, 59, 59, 60, 61, 61,
	61, 61, 56, 57, 57, 57, 57, 57, 58, 58,
	58, 58, 58,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	11, 12, 9, 1, 3, 1, 3, 3, 1, 3,
	3, 1, 2, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 2, 1, 1,
	5, 6, 2, 0, 2, 1, 3, 1, 3, 3,
	5, 1, 6, 3, 5, 3, 1, 5, 4, 4,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 1,
	3, 1, 1, 1, 3, 4, 6, 7, 1, 3,
	1, 4, 0, 4, 0, 1, 1, 1, 2, 2,
	0, 1, 3, 1, 3, 1, 3, 5, 5, 4,
	6, 6, 5, 6, 6, 6, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 3, 0, 1, 3, 1, 2, 2, 2,
	1, 1, 4, 2, 2, 0, 4, 2, 2, 0,
	2, 3, 5, 4, 2, 1, 3, 3, 0, 3,
	3, 2, 1, 2, 1, 2, 2, 2, 2, 1,
	2, 9, 6, 7, 4, 2, 2, 2, 2, 5,
	3, 7, 8, 6, 9, 9, 5, 4, 1, 2,
	3, 3, 3, 3, 7, 6, 8, 7, 2, 3,
	4, 3, 3, 2, 7, 6, 6, 7, 6, 5,
	4, 6, 7, 6, 5, 4, 3, 8, 7, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 8,
	7, 7, 6, 2, 0, 7, 6, 11, 10, 12,
	11, 2, 2, 4, 2, 2, 1, 3, 1, 3,
	2, 10, 9, 9, 8, 13, 12, 12, 11, 10,
	9, 9, 8, 5, 5, 0, 6, 10, 0, 2,
	0, 2, 6, 0, 2, 0, 2, 2, 0, 3,
	3, 0, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 1, 2, 2, 2, 3, 2, 3, 3,
	2, 0, 1, 3, 2, 0, 2, 2, 3, 1,
	2, 3, 3, 0, 1, 3, 1, 3, 6, 4,
	9, 8, 8, 7, 9, 8, 8, 7, 2, 4,
	7, 3, 3, 3, 5, 10, 3, 3, 5, 0,
	3, 6, 9, 11, 7, 4, 6, 2, 4, 2,
	4, 10, 1, 3, 8, 6, 2, 4, 3, 2,
	3, 1, 3, 1, 1, 10, 8, 2, 3, 5,
	7, 5, 2, 6, 6, 6, 6, 6, 2, 6,
	6, 10, 10,
}

var yyChk = [...]int16{
	-1000, -65, -66, -1, -6, -2, -3, -10, -5, -7,
	-8, -9, -12, -13, -15, -14, -16, -17, -18, -20,
	-22, -23, -21, -19, -24, -25, -26, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -39, -40,
	-41, -42, -43, -44, -45, -47, -48, -49, -50, -51,
	-53, -54, -55, -59, -60, -61, -56, -57, -58, 8,
	18, 19, 62, 30, 40, 53, 28, 77, 57, 98,
	129, -62, 148, -64, 156, -82, 130, 143, 153, -81,
	145, 63, 147, 144, 146, 69, 70, -105, 149, 132,
	43, 45, 46, 61, 148, 42, 71, -111, 73, 59,
	5, 90, 51, 86, 102, 107, 88, 92, 116, 117,
	82, 83, 84, 81, 32, 122, 123, 85, 143, 44,
	46, 41, 5, 86, 101, 105, 93, 44, 61, 46,
	41, 51, 5, 86, 101, 102, 105, 35, 93, -67,
	-76, 4, 9, 46, 5, 35, 143, 35, 143, 78,
	-6, 37, 115, 108, -1, -70, -76, 6, -62, 128,
	140, 10, 156, 157, 152, 153, 155, 158, 159, 154,
	-82, 130, 140, 139, -82, -86, 143, -85, 64, 120,
	-107, 120, 7, 47, -107, 79, 80, 61, 71, 74,
	75, 76, 4, 74, 76, 58, 79, 80, 4, 94,
	88, 7, 7, 9, 143, 48, 143, -74, 143, 139,
	-72, 146, -105, 108, 7, 130, -110, 143, 146, -110,
	143, -67, -76, 48, 143, 144, 143, 108, 7, 7,
	-110, 92, -110, -76, -68, -73, -69, -71, -74, 130,
	-79, -77, 130, 143, 27, 26, 112, 114, 118, -78,
	-80, -83, -82, 48, -74, 7, 21, 24, 7, 7,
	21, 4, 7, -6, 58, 143, 144, -67, -92, 11,
	-68, -70, -62, 71, 73, 143, 146, -82, -82, -82,
	-82, -82, -82, -82, -82, 131, -62, 131, -88, 143,
	71, 73, 143, 66, -86, -86, -79, 31, -76, -107,
	143, 7, -67, -76, 80, -107, -107, 75, -107, -107,
	79, 80, 79, 80, 143, 139, -107, 79, 80, 143,
	80, -107, -74, 143, -110, 143, -4, -139, 31, 119,
	-135, 71, 143, 31, -52, 130, 139, 143, 143, 143,
	-62, -70, 7, -76, 143, 139, 143, 143, 143, 7,
	7, 128, 10, 128, 20, -66, -69, 150, 151, -82,
	-79, 25, 26, 130, 27, 130, 130, 130, -87, 133,
	134, 135, 136, 137, 138, 142, 141, 113, 143, 31,
	143, 7, 24, 143, 143, 143, 7, 4, 143, 143,
	143, -110, -76, -93, 125, 12, -67, 131, -82, 66,
	65, 5, -90, 13, 31, 143, -76, -90, -107, -67,
	-76, -67, -76, -107, -67, -76, -67, 31, 80, -107,
	80, -107, 139, 143, 139, -67, -90, 80, -107, -107,
	-67, -76, 133, -139, -104, -103, -102, 49, 60, 38,
	39, 50, 81, 51, 54, 55, 52, 144, 119, 72,
	7, 37, -140, -141, 31, -138, -136, -137, -110, 143,
	139, -72, 139, 7, 130, 139, 131, 7, -110, 7,
	143, 7, 139, -110, -110, -68, 143, -68, 23, 131,
	131, -79, -79, 131, 130, 25, -6, 130, -110, -110,
	-110, -83, 130, 7, 81, 24, 143, 143, 24, 4,
	143, 143, 4, 133, 133, -92, -99, 29, -94, -95,
	-110, 143, 156, -105, -94, -76, 68, 143, -82, -75,
	133, 134, 142, 141, -96, -97, 14, 15, 12, 5,
	-90, -97, -67, -76, -76, -92, -76, -90, -67, 31,
	-76, -90, 31, 76, -107, -67, 31, -107, -67, -76,
	143, 139, 139, 143, -90, -97, -107, -67, -76, -67,
	-76, -76, -92, 143, 144, -104, 145, 144, 143, 144,
	-114, -109, 143, 49, 49, 49, 49, -135, 144, 143,
	50, 143, 146, -142, -143, 32, -138, 128, 131, 71,
	-110, 139, -72, 143, -72, 143, -62, 143, 31, -6,
	139, 121, 143, 143, 143, 139, 128, -68, 10, -62,
	-6, 130, 131, -6, 128, 128, 128, -79, 143, -114,
	143, 24, 143, 143, 4, 143, 146, -110, 144, 147,
	69, 70, -93, -90, 130, 128, 140, 130, 140, -92,
	68, -76, 143, 143, -105, -105, -98, 16, 17, -133,
	144, 149, -133, -89, -91, 143, -75, -97, -76, -92,
	-92, -97, -90, -97, 31, 76, -90, -96, 76, -27,
	133, 134, 25, 142, 141, -67, 31, 31, 76, -67,
	-76, -76, -92, 139, 143, 143, -97, -67, -76, -76,
	-92, -76, -92, -92, -97, 150, 150, 128, 145, 145,
	145, 145, -11, 49, 31, -129, 95, -130, 95, 133,
	73, -72, -131, 100, 131, 130, -46, 49, 106, -110,
	-112, 35, 36, -110, -68, 7, 143, 131, 131, -6,
	-63, 143, 131, -110, -110, -110, 131, -104, -108, 56,
	143, 143, -99, -96, -100, 143, 144, 147, 153, -94,
	71, 145, 71, -93, -90, 144, 144, 15, 128, 126,
	127, -92, -97, -97, -97, 76, -27, -96, -27, -76,
	-84, -106, 143, -84, 130, -105, -105, 31, 76, 76,
	-27, -76, -92, -92, -97, 143, -76, -92, -92, -97,
	-92, -97, -97, 143, 143, -109, 50, 145, 35, 109,
	-115, 81, -128, -127, 143, 73, -115, -128, 143, 34,
	33, 67, 99, 58, 31, -62, 145, 145, 121, -119,
	-110, -79, 131, 131, 128, 131, 131, 131, 143, -90,
	-126, 143, 131, -100, 131, 128, -99, -96, 17, -133,
	-89, -97, -27, -76, -76, -90, 128, -84, 76, -27,
	-27, -76, -92, -97, -97, -92, -97, -97, -97, 133,
	133, 60, 21, 21, -134, 90, -114, -128, 96, 96,
	-134, 130, -6, 145, 145, -46, 131, 103, -112, 128,
	-63, -96, 130, 145, 153, -90, 144, -76, -90, -90,
	-97, -84, 131, -27, -76, -76, -92, -97, -97, 144,
	143, 144, -108, 124, 144, -116, 143, -116, -108, 145,
	68, 58, 31, 130, -119, -119, -126, 146, 131, 145,
	-96, -90, -97, -97, -76, -92, -92, -97, -101, -102,
	128, -120, -117, 82, 131, 145, -46, -132, 145, 131,
	131, -126, -97, -92, -97, -97, -101, -116, -121, -118,
	83, -116, -128, 131, 128, -97, -125, -124, 84, -116,
	104, -132, -113, 85, -122, -123, -110, 130, 143, 128,
	133, -132, -122, -110, 144, 131,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	3, -2, 0, 63, 65, 68, 0, 169, 0, 88,
	89, 0, 171, 172, 173, 174, 175, 176, 178, 168,
	200, 284, 0, 284, 0, 248, 0, 0, 0, 0,
	0, 378, 0, 0, 399, 406, 409, 417, 422, 428,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 397, 0, 0, 0, 140,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 4, 0, 116, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 71, 0, 201,
	140, 284, 0, 230, 140, 0, 284, 284, 0, 284,
	284, 0, 0, 284, 0, 0, 0, 284, 0, 382,
	390, 0, 0, 0, 208, 0, 0, 340, 112, 0,
	111, 113, 114, 0, 0, 0, 93, 121, 122, 0,
	249, 140, 251, 0, 266, 367, 383, 0, 0, 0,
	408, 418, 0, 252, 94, 95, 97, 101, 106, 0,
	139, 145, 0, 169, 0, 0, 0, 0, 0, 143,
	141, 0, 157, 0, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 410, 140, 118, 0,
	92, 0, 64, 66, 67, 69, 70, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 0, 86, 170, 179,
	180, 181, 177, 0, 0, 72, 0, 0, 183, 224,
	283, 0, 140, 183, 284, 140, 140, 284, 140, 0,
	0, 284, 0, 284, 278, 0, 183, 0, 284, 369,
	284, 140, 379, 400, 407, 0, 208, 203, 0, 0,
	205, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 395, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 0, 265, 0,
	0, 0, 116, 134, 0, 0, 140, 85, 0, 0,
	0, 0, 195, 0, 0, 229, 183, 195, 140, 140,
	116, 140, 183, 0, 140, 183, 0, 0, 284, 0,
	284, 140, 0, 0, 0, 183, 195, 284, 140, 140,
	140, 116, 0, 202, 211, 212, 214, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 313, 314, 328, 339, 342, 0, 0, 112,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	384, 0, 0, 419, 421, 96, 99, 98, 0, 103,
	105, 142, 144, -2, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 264, 0, 0, 0, 118, 183, 0, 117, 119,
	123, 121, 128, 130, 115, 116, 90, 0, 73, 140,
	0, 0, 0, 0, 222, 199, 0, 0, 0, 0,
	195, 245, 140, 116, 116, 195, 183, 195, 0, 0,
	183, 195, 0, 0, 0, 0, 0, 140, 140, 116,
	0, 0, 0, 282, 195, 286, 140, 140, 116, 140,
	116, 116, 195, 429, 430, 213, 215, 216, 217, 218,
	220, 364, 366, 0, 0, 0, 0, 206, 207, 209,
	210, 0, 233, 318, 320, 0, 341, 343, 344, 345,
	347, 0, 109, 112, 108, 389, 0, 0, 0, 405,
	0, 0, 255, 391, 396, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 355,
	256, 0, 258, 261, 0, 263, 368, 423, 424, 425,
	426, 427, 134, 195, 0, 0, 0, 0, 0, 118,
	91, 183, 225, 226, 227, 228, 189, 0, 0, 193,
	190, 191, 194, 182, 184, 186, 223, 244, 116, 195,
	195, 377, 195, 247, 0, 0, 195, 268, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	116, 116, 195, 0, 280, 281, 285, 140, 116, 116,
	195, 116, 195, 195, 373, 0, 0, 0, 240, 241,
	242, 243, 231, 0, 0, 323, 351, 323, 351, 0,
	346, 107, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 413, 414, 420, 100, 0, 104, 147, 148, 0,
	0, 74, 152, 0, 0, 0, 158, 254, 380, 0,
	257, 262, 183, 132, 0, 135, 136, 137, 0, 120,
	124, 0, 129, 134, 195, 197, 198, 0, 0, 187,
	188, 195, 375, 376, 246, 0, 140, 267, 140, 183,
	291, 296, 298, 292, 0, 294, 295, 0, 0, 0,
	140, 116, 195, 195, 304, 279, 116, 195, 195, 312,
	195, 371, 372, 0, 0, 365, 232, 0, 0, 0,
	325, 0, 319, 351, 0, 0, 325, 321, 0, 329,
	330, 0, 0, 0, 0, 0, 0, 404, 0, 416,
	411, 102, 150, 151, 0, 153, 154, 155, 354, 195,
	62, 0, 133, 138, 125, 0, 183, 221, 0, 192,
	185, 374, 140, 183, 183, 195, 0, 0, 0, 140,
	140, 116, 195, 302, 303, 195, 310, 311, 370, 0,
	0, 0, 234, 235, 355, 0, 324, 350, 0, 0,
	355, 0, 0, 386, 387, 392, 0, 0, 0, 0,
	75, 132, 0, 0, 0, 195, 196, 183, 195, 195,
	288, 297, 293, 140, 116, 116, 195, 301, 309, 432,
	431, 237, 316, 326, 327, 348, 352, 349, 331, 0,
	385, 0, 0, 0, 415, 412, 60, 0, 126, 0,
	132, 195, 290, 287, 116, 195, 195, 308, 236, 238,
	0, 333, 332, 0, 351, 388, 393, 0, 402, 131,
	127, 61, 289, 195, 306, 307, 239, 353, 335, 334,
	0, 356, 322, 0, 0, 305, 337, 336, 363, 357,
	0, 403, 317, 0, 360, 359, 0, 0, 338, 363,
	0, 0, 358, 361, 362, 401,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:186
		{
			setParseTree(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:192
		{
			yyVAL.stmts = []Statement{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:196
		{
			if len(yyDollar[1].stmts) >= 1 {
				yyVAL.stmts = yyDollar[1].stmts
			} else {
				yylex.Error("excrescent semicolo")
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:204
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:212
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:216
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:220
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:224
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:228
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:232
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:236
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:240
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:244
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:248
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:252
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:256
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:260
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:264
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:268
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:272
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:276
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:280
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:284
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:288
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:292
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:296
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:300
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:304
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:308
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:316
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:320
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:324
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:328
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:340
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:352
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:356
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:360
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:364
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:368
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:372
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:376
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:380
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:384
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:388
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:404
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:408
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:412
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:424
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:428
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:434
		{
			stmt := &SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Sources = yyDollar[4].sources
			stmt.Dimensions = yyDollar[6].dimens
			stmt.ExceptDimensions = yyDollar[7].dimens
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			stmt.SLimit = yyDollar[10].intSlice[2]
			stmt.SOffset = yyDollar[10].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[8].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[11].location
			if len(yyDollar[3].sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[3].sources) == 1 {
				mst, ok := yyDollar[3].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 61:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:475
		{
			stmt := &SelectStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Fields = yyDollar[3].fields
			stmt.Sources = yyDollar[5].sources
			stmt.Dimensions = yyDollar[7].dimens
			stmt.ExceptDimensions = yyDollar[8].dimens
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.SLimit = yyDollar[11].intSlice[2]
			stmt.SOffset = yyDollar[11].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[9].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[12].location
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 62:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:517
		{
			stmt := &SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Dimensions = yyDollar[4].dimens
			stmt.ExceptDimensions = yyDollar[5].dimens
			stmt.Condition = yyDollar[3].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[6].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[9].location
			yyVAL.stmt = stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.fields = []*Field{yyDollar[1].field}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.fields = append([]*Field{yyDollar[1].field}, yyDollar[3].fields...)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:562
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: TAG}}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:566
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: FIELD}}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:574
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:578
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:588
		{
			c := yyDollar[1].expr.(*CaseWhenExpr)
			c.Conditions = append(c.Conditions, yyDollar[2].expr.(*CaseWhenExpr).Conditions...)
			c.Assigners = append(c.Assigners, yyDollar[2].expr.(*CaseWhenExpr).Assigners...)
			yyVAL.expr = c
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:597
		{
			c := &CaseWhenExpr{}
			c.Conditions = []Expr{yyDollar[2].expr}
			c.Assigners = []Expr{yyDollar[4].expr}
			yyVAL.expr = c
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:606
		{
			yyVAL.fields = []*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:610
		{
			yyVAL.fields = append([]*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}, yyDollar[3].fields...)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:616
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:620
		{
			yyVAL.expr = &BinaryExpr{Op: Token(DIV), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:624
		{
			yyVAL.expr = &BinaryExpr{Op: Token(ADD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.expr = &BinaryExpr{Op: Token(SUB), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_XOR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MOD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_AND), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:644
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_OR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:648
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			if strings.ToLower(yyDollar[1].str) == "cast" {
				if len(yyDollar[3].fields) != 1 {
					yylex.Error("The cast format is incorrect.")
				} else {
					name := "Unknown"
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "bool" {
						name = "cast_bool"
					}
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "float" {
						name = "cast_float64"
					}
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "int" {
						name = "cast_int64"
					}
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "string" {
						name = "cast_string"
					}
					cols := &Call{Name: strings.ToLower(name), Args: []Expr{}}
					cols.Args = append(cols.Args, yyDollar[3].fields[0].Expr)
					yyVAL.expr = cols
				}
			} else {
				cols := &Call{Name: strings.ToLower(yyDollar[1].str), Args: []Expr{}}
				for i := range yyDollar[3].fields {
					cols.Args = append(cols.Args, yyDollar[3].fields[i].Expr)
				}
				yyVAL.expr = cols
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str)}
			yyVAL.expr = cols
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:688
		{
			switch s := yyDollar[2].expr.(type) {
			case *NumberLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			case *IntegerLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			default:
				yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: &IntegerLiteral{Val: -1}, RHS: yyDollar[2].expr}
			}

		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.expr = &DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:710
		{
			c := yyDollar[2].expr.(*CaseWhenExpr)
			c.Assigners = append(c.Assigners, yyDollar[4].expr)
			yyVAL.expr = c
		}
	case 91:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:716
		{
			yyVAL.expr = &VarRef{}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:726
		{
			yyVAL.sources = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:742
		{
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[3].sources...)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.sources = yyDollar[1].sources

		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:751
		{
			yyVAL.sources = append(yyDollar[1].sources, yyDollar[3].sources...)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:755
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:760
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[5].sources...)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.sources = []Source{yyDollar[1].source}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:771
		{
			join := &Join{}
			if len(yyDollar[1].sources) != 1 || len(yyDollar[4].sources) != 1 {
				yylex.Error("only support one query for join")
			}
			join.LSrc = yyDollar[1].sources[0]
			join.RSrc = yyDollar[4].sources[0]
			join.Condition = yyDollar[6].expr
			yyVAL.source = join
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:784
		{
			all_subquerys := []Source{}
			for _, temp_stmt := range yyDollar[2].stmts {
				stmt, ok := temp_stmt.(*SelectStatement)
				if !ok {
					yylex.Error("expexted SelectStatement")
				}
				build_SubQuery := &SubQuery{Statement: stmt}
				all_subquerys = append(all_subquerys, build_SubQuery)
			}
			yyVAL.sources = all_subquerys
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:797
		{
			if len(yyDollar[2].stmts) != 1 {
				yylex.Error("expexted SelectStatement length")
			}
			all_subquerys := []Source{}
			stmt, ok := yyDollar[2].stmts[0].(*SelectStatement)
			if !ok {
				yylex.Error("expexted SelectStatement")
			}
			build_SubQuery := &SubQuery{
				Statement: stmt,
				Alias:     yyDollar[5].str,
			}
			all_subquerys = append(all_subquerys, build_SubQuery)
			yyVAL.sources = all_subquerys
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:826
		{
			mst := yyDollar[5].ment
			mst.Database = yyDollar[1].str
			mst.RetentionPolicy = yyDollar[3].str
			yyVAL.ment = mst
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:833
		{
			mst := yyDollar[4].ment
			mst.RetentionPolicy = yyDollar[2].str
			yyVAL.ment = mst
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:839
		{
			mst := yyDollar[4].ment
			mst.Database = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			mst := yyDollar[3].ment
			mst.RetentionPolicy = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}

			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:876
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:880
		{
			yyVAL.dimens = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:886
		{
			yyVAL.dimens = yyDollar[2].dimens
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:890
		{
			yyVAL.dimens = nil
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.dimens = []*Dimension{yyDollar[1].dimen}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.dimens = append([]*Dimension{yyDollar[1].dimen}, yyDollar[3].dimens...)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.str = yyDollar[1].str
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.str = yyDollar[1].str
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:920
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:924
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}}}}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:932
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: yyDollar[5].tdur}}}}
		}
	case 127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:940
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: time.Duration(-yyDollar[6].tdur)}}}}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:952
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.dimen = &Dimension{Expr: &RegexLiteral{Val: re}}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:967
		{
			if strings.ToLower(yyDollar[1].str) != "tz" {
				yylex.Error("Expect tz")
			}
			loc, err := time.LoadLocation(yyDollar[3].str)
			if err != nil {
				yylex.Error("nable to find time zone")
			}
			yyVAL.location = loc
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.location = nil
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:984
		{
			yyVAL.inter = yyDollar[3].inter
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.inter = "null"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.inter = yyDollar[1].str
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.inter = yyDollar[1].int64
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.inter = yyDollar[1].float64
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			switch s := yyDollar[2].inter.(type) {
			case int64:
				yyVAL.inter = -1 * s
			case float64:
				yyVAL.inter = -1 * s
			default:
				yyVAL.inter = yyDollar[2].inter
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1023
		{
			yyVAL.expr = nil
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1033
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1057
		{
			ident := &VarRef{Val: yyDollar[1].str}
			var expr, e Expr
			for i := range yyDollar[4].fields {
				expr = &BinaryExpr{LHS: ident, Op: Token(EQ), RHS: yyDollar[4].fields[i].Expr}
				if e == nil {
					e = expr
				} else {
					e = &BinaryExpr{LHS: e, Op: Token(OR), RHS: expr}
				}
			}
			yyVAL.expr = e
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1071
		{
			yyVAL.expr = &InCondition{Stmt: yyDollar[4].stmt.(*SelectStatement), Column: &VarRef{Val: yyDollar[1].str}}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1075
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1079
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1083
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1087
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1091
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCH,
			}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1099
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCHPHRASE,
			}
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1107
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  IPINRANGE,
			}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			if yyDollar[2].int == NEQREGEX {
				switch yyDollar[3].expr.(type) {
				case *RegexLiteral:
				default:
					yylex.Error("expected regular expression")
				}
			}
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.int = EQ
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.int = NEQ
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.int = LT
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.int = LTE
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.int = GT
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.int = GTE
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.int = EQREGEX
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.int = NEQREGEX
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.int = LIKE
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.str = yyDollar[1].str
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str, Type: yyDollar[3].dataType}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.expr = &NumberLiteral{Val: yyDollar[1].float64}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1196
		{
			yyVAL.expr = &IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.expr = &StringLiteral{Val: yyDollar[1].str}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.expr = &BooleanLiteral{Val: true}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.expr = &BooleanLiteral{Val: false}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.expr = &RegexLiteral{Val: re}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str + "." + yyDollar[3].str, Type: Tag}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			switch strings.ToLower(yyDollar[1].str) {
			case "float":
				yyVAL.dataType = Float
			case "integer":
				yyVAL.dataType = Integer
			case "string":
				yyVAL.dataType = String
			case "boolean":
				yyVAL.dataType = Boolean
			case "time":
				yyVAL.dataType = Time
			case "duration":
				yyVAL.dataType = Duration
			case "unsigned":
				yyVAL.dataType = Unsigned
			default:
				yylex.Error("wrong field dataType")
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.dataType = Tag
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.dataType = AnyField
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1265
		{
			yyVAL.sortfs = nil
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.sortfs = []*SortField{yyDollar[1].sortf}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1275
		{
			yyVAL.sortfs = append([]*SortField{yyDollar[1].sortf}, yyDollar[3].sortfs...)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: false}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1289
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.intSlice = append(yyDollar[1].intSlice, yyDollar[2].intSlice...)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.int64 = yyDollar[1].int64
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			if n, ok := yyDollar[1].expr.(*IntegerLiteral); ok {
				yyVAL.int64 = n.Val
			} else {
				yylex.Error("unsupported type, expect integer type")
			}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1316
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1320
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1324
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1328
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1334
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1338
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1342
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1346
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1352
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: false}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1356
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: true}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1362
		{
			sms := yyDollar[4].stmt

			sms.(*CreateDatabaseStatement).Name = yyDollar[3].str
			sms.(*CreateDatabaseStatement).DatabaseAttr = yyDollar[5].databasePolicy
			yyVAL.stmt = sms
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1370
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = false
			stmt.Name = yyDollar[3].str
			stmt.DatabaseAttr = yyDollar[4].databasePolicy
			yyVAL.stmt = stmt
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: false}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1385
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: yyDollar[1].bool}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: yyDollar[3].bool}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[3].int64), EnableTagArray: yyDollar[1].bool}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1399
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: false}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			if strings.ToLower(yyDollar[3].str) != "array" {
				yylex.Error("unsupport type")
			}
			yyVAL.bool = true
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.bool = false
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = true
			stmt.RetentionPolicyDuration = yyDollar[2].durations.PolicyDuration
			stmt.RetentionPolicyReplication = yyDollar[2].durations.Replication
			stmt.RetentionPolicyName = yyDollar[2].durations.PolicyName
			stmt.ShardKey = yyDollar[2].durations.ShardKey
			sort.Strings(stmt.ShardKey)

			if yyDollar[2].durations.rpdefault == true {
				yylex.Error("no default")
			}

			if yyDollar[2].durations.ShardGroupDuration == -1 || yyDollar[2].durations.ShardGroupDuration == 0 {
				stmt.RetentionPolicyShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
			}

			if yyDollar[2].durations.HotDuration == -1 || yyDollar[2].durations.HotDuration == 0 {
				stmt.RetentionPolicyHotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyHotDuration = yyDollar[2].durations.HotDuration
			}

			if yyDollar[2].durations.WarmDuration == -1 || yyDollar[2].durations.WarmDuration == 0 {
				stmt.RetentionPolicyWarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyWarmDuration = yyDollar[2].durations.WarmDuration
			}

			if yyDollar[2].durations.IndexGroupDuration == -1 || yyDollar[2].durations.IndexGroupDuration == 0 {
				stmt.RetentionPolicyIndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
			}
			yyVAL.stmt = stmt
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if len(yyDollar[1].durations.ShardKey) != 0 && len(yyDollar[2].durations.ShardKey) != 0 {
				yylex.Error("Repeat ShardKey")
			} else if len(yyDollar[2].durations.ShardKey) != 0 {
				yyDollar[1].durations.ShardKey = yyDollar[2].durations.ShardKey
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.PolicyDuration == nil || yyDollar[2].durations.PolicyDuration == nil {
				if yyDollar[2].durations.PolicyDuration != nil {
					yyDollar[1].durations.PolicyDuration = yyDollar[2].durations.PolicyDuration
				}
			} else {
				yylex.Error("Repeat Policy Duration")
			}

			if yyDollar[1].durations.Replication == nil || yyDollar[2].durations.Replication == nil {
				if yyDollar[2].durations.Replication != nil {
					yyDollar[1].durations.Replication = yyDollar[2].durations.Replication
				}
			} else {
				yylex.Error("Repeat Policy Replication")
			}

			if len(yyDollar[1].durations.PolicyName) == 0 || len(yyDollar[2].durations.PolicyName) == 0 {
				if len(yyDollar[2].durations.PolicyName) != 0 {
					yyDollar[1].durations.PolicyName = yyDollar[2].durations.PolicyName
				}
			} else {
				yylex.Error("Repeat Policy Name")
			}

			if yyDollar[1].durations.rpdefault == false || yyDollar[2].durations.rpdefault == false {
				if yyDollar[2].durations.rpdefault == true {
					yyDollar[1].durations.rpdefault = yyDollar[2].durations.rpdefault
				}
			} else {
				yylex.Error("Repeat rpdefault")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			duration := yyDollar[2].tdur
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyDuration: &duration}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			replicaN := int(yyDollar[2].int64)
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, Replication: &replicaN}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyName: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, ReplicaNum: uint32(yyDollar[2].int64)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: true}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			if len(yyDollar[2].strSlice) == 0 {
				yylex.Error("ShardKey should not be nil")
			}
			yyVAL.durations = &Durations{ShardKey: yyDollar[2].strSlice, ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: false}
		}
	case 221:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1578
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Source = yyDollar[6].ment
			sms.Condition = yyDollar[7].expr
			sms.SortFields = yyDollar[8].sortfs
			sms.Limit = yyDollar[9].intSlice[0]
			sms.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = sms
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1589
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Condition = yyDollar[4].expr
			sms.SortFields = yyDollar[5].sortfs
			sms.Limit = yyDollar[6].intSlice[0]
			sms.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = sms
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1601
		{
			sms := &ShowMeasurementsDetailStatement{}
			sms.Database = yyDollar[4].str
			sms.Source = yyDollar[7].ment
			yyVAL.stmt = sms
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1608
		{
			sms := &ShowMeasurementsDetailStatement{}
			sms.Database = yyDollar[4].str
			yyVAL.stmt = sms
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1645
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{
				Database: yyDollar[5].str,
			}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 232:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1665
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Default = true
			yyVAL.stmt = stmt
		}
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1675
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1682
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Admin = true
			yyVAL.stmt = stmt
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1690
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Rwuser = true
			yyVAL.stmt = stmt
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1701
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			stmt.Replication = int(yyDollar[4].int64)

			if yyDollar[5].durations.ShardGroupDuration == -1 || yyDollar[5].durations.ShardGroupDuration == 0 {
				stmt.ShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.ShardGroupDuration = yyDollar[5].durations.ShardGroupDuration
			}

			if yyDollar[5].durations.HotDuration == -1 || yyDollar[5].durations.HotDuration == 0 {
				stmt.HotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.HotDuration = yyDollar[5].durations.HotDuration
			}

			if yyDollar[5].durations.WarmDuration == -1 || yyDollar[5].durations.WarmDuration == 0 {
				stmt.WarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.WarmDuration = yyDollar[5].durations.WarmDuration
			}

			if yyDollar[5].durations.IndexGroupDuration == -1 || yyDollar[5].durations.IndexGroupDuration == 0 {
				stmt.IndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.IndexGroupDuration = yyDollar[5].durations.IndexGroupDuration
			}

			yyVAL.stmt = stmt
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1733
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			stmt.Replication = int(yyDollar[4].int64)
			yyVAL.stmt = stmt
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1785
		{
			yyVAL.durations = &Durations{ShardGroupDuration: yyDollar[3].tdur, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: yyDollar[3].tdur, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: yyDollar[3].tdur, IndexGroupDuration: -1}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1797
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: yyDollar[3].tdur}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1805
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Sources = yyDollar[4].sources
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1816
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Condition = yyDollar[4].expr
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1826
		{
			stmt := &ShowSeriesStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1838
		{
			stmt := &ShowSeriesStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1851
		{
			yyVAL.stmt = &ShowUsersStatement{}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			stmt := &DropDatabaseStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1865
		{
			stmt := &DropSeriesStatement{}
			stmt.Sources = yyDollar[3].sources
			stmt.Condition = yyDollar[4].expr
			yyVAL.stmt = stmt
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			stmt := &DropSeriesStatement{}
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Sources = yyDollar[2].sources
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Condition = yyDollar[2].expr
			yyVAL.stmt = stmt
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1896
		{
			stmt := &AlterRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Duration = yyDollar[7].durations.PolicyDuration
			stmt.Replication = yyDollar[7].durations.Replication
			stmt.Default = yyDollar[7].durations.rpdefault
			if yyDollar[7].durations.ShardGroupDuration == -1 {
				stmt.ShardGroupDuration = nil
			} else {
				stmt.ShardGroupDuration = &yyDollar[7].durations.ShardGroupDuration
			}
			if yyDollar[7].durations.HotDuration == -1 {
				stmt.HotDuration = nil
			} else {
				stmt.HotDuration = &yyDollar[7].durations.HotDuration
			}
			if yyDollar[7].durations.WarmDuration == -1 {
				stmt.WarmDuration = nil
			} else {
				stmt.WarmDuration = &yyDollar[7].durations.WarmDuration
			}
			if yyDollar[7].durations.IndexGroupDuration == -1 {
				stmt.IndexGroupDuration = nil
			} else {
				stmt.IndexGroupDuration = &yyDollar[7].durations.IndexGroupDuration
			}

			if len(yyDollar[7].durations.PolicyName) > 0 || yyDollar[7].durations.ReplicaNum != 0 {
				yylex.Error("PolicyName and ReplicaNum")
			}
			yyVAL.stmt = stmt
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1934
		{
			stmt := &DropRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1943
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1951
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1959
		{
			stmt := &GrantStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1976
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[5].str}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1980
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1986
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1994
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2002
		{
			stmt := &RevokeStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2019
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[5].str}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2023
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[4].str}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.stmt = &DropUserStatement{Name: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2035
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]
			yyVAL.stmt = stmt

		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2049
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			stmt.SLimit = yyDollar[7].intSlice[2]
			stmt.SOffset = yyDollar[7].intSlice[3]
			yyVAL.stmt = stmt
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = "PRIMARYKEY"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = "SORTKEY"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = "PROPERTY"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.str = "SHARDKEY"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.str = "ENGINETYPE"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.str = "SCHEMA"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = "INDEXES"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = "COMPACT"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yylex.Error("SHOW command error, only support PRIMARYKEY, SORTKEY, SHARDKEY, ENGINETYPE, INDEXES, SCHEMA, COMPACT")
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2101
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2108
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Rp = yyDollar[6].str
			stmt.Measurement = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2117
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2125
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Rp = yyDollar[5].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2133
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = yyDollar[2].str
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2152
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2162
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 287:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2174
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			yyVAL.stmt = stmt

		}
	case 288:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2187
		{
			stmt := yyDollar[7].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[8].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 289:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2198
		{
			stmt := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Hints = yyDollar[2].hints
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[5].str
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[10].expr
			stmt.SortFields = yyDollar[11].sortfs
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 290:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2211
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.Hints = yyDollar[2].hints
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[5].str
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = IN
			stmt.TagKeyExpr = yyDollar[3].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			temp := []string{yyDollar[1].str}
			yyVAL.expr = &ListLiteral{Vals: temp}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyDollar[3].expr.(*ListLiteral).Vals = append(yyDollar[3].expr.(*ListLiteral).Vals, yyDollar[1].str)
			yyVAL.expr = yyDollar[3].expr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = yyDollar[1].str
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[3].stmt.(*SelectStatement)
			stmt.Analyze = true
			yyVAL.stmt = stmt
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[2].stmt.(*SelectStatement)
			stmt.Analyze = false
			yyVAL.stmt = stmt
		}
	case 301:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2308
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2320
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 303:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2331
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 304:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2343
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 305:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:2359
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt_temp := yyDollar[10].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[11].expr
			stmt.Dimensions = yyDollar[12].dimens
			stmt.Limit = yyDollar[13].intSlice[0]
			stmt.Offset = yyDollar[13].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 306:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2376
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 307:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2391
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 308:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2408
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt_temp := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[9].expr
			stmt.Dimensions = yyDollar[10].dimens
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 309:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2426
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 310:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2438
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 311:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2449
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 312:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2461
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2475
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			if yyDollar[5].cmOption.NumOfShards != 0 && yyDollar[5].cmOption.Type == "range" {
				yylex.Error("Not support to set num-of-shards for range sharding")
			}
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.NumOfShards = yyDollar[5].cmOption.NumOfShards
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.EngineType = yyDollar[5].cmOption.EngineType

			yyVAL.stmt = stmt
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2498
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}

			// check if PrimaryKey & SortKey is IN Tags/Fields/time
			for _, key := range yyDollar[5].cmOption.PrimaryKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid PrimaryKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			for _, key := range yyDollar[5].cmOption.SortKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid SortKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			// check if ShardKey is IN Tags/Fields
			for _, key := range yyDollar[5].cmOption.ShardKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField {
					yylex.Error("Invalid ShardKey")
					return 1
				}
			}
			// check if primary key is left prefix of sort key
			if len(yyDollar[5].cmOption.PrimaryKey) > len(yyDollar[5].cmOption.SortKey) {
				yylex.Error("PrimaryKey should be left prefix of SortKey")
				return 1
			}
			for i, v := range yyDollar[5].cmOption.PrimaryKey {
				if v != yyDollar[5].cmOption.SortKey[i] {
					yylex.Error("PrimaryKey should be left prefix of SortKey")
					return 1
				}
			}
			// check if indexlist of secondary is IN Tags/Fields
			for i := range yyDollar[5].cmOption.IndexType {
				indextype := yyDollar[5].cmOption.IndexType[i]
				if indextype == "timecluster" {
					continue
				}
				indexlist := yyDollar[5].cmOption.IndexList[i]
				for _, col := range indexlist {
					_, inTag := stmt.Tags[col]
					_, inField := stmt.Fields[col]
					if !inTag && !inField {
						yylex.Error("Invalid indexlist")
					}
				}
			}
			if yyDollar[5].cmOption.NumOfShards != 0 && yyDollar[5].cmOption.Type == "range" {
				yylex.Error("Not support to set num-of-shards for range sharding")
			}

			stmt.EngineType = yyDollar[5].cmOption.EngineType
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.TimeClusterDuration = yyDollar[5].cmOption.TimeClusterDuration
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.NumOfShards = yyDollar[5].cmOption.NumOfShards
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.PrimaryKey = yyDollar[5].cmOption.PrimaryKey
			stmt.SortKey = yyDollar[5].cmOption.SortKey
			stmt.Property = yyDollar[5].cmOption.Property
			stmt.CompactType = yyDollar[5].cmOption.CompactType
			yyVAL.stmt = stmt
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2588
		{
			option := &CreateMeasurementStatementOption{}
			option.Type = "hash"
			option.EngineType = "tsstore"
			yyVAL.cmOption = option
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2595
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.NumOfShards = yyDollar[5].int64
			option.Type = yyDollar[6].str
			option.EngineType = yyDollar[2].str
			yyVAL.cmOption = option
		}
	case 317:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2612
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
				option.TimeClusterDuration = yyDollar[3].indexType.timeClusterDuration
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.NumOfShards = yyDollar[5].int64
			option.Type = yyDollar[6].str
			option.EngineType = yyDollar[2].str
			if yyDollar[7].strSlice != nil {
				option.PrimaryKey = yyDollar[7].strSlice
			} else if yyDollar[8].strSlice != nil {
				option.PrimaryKey = yyDollar[8].strSlice
			}

			if yyDollar[8].strSlice != nil {
				option.SortKey = yyDollar[8].strSlice
			} else if yyDollar[7].strSlice != nil {
				option.SortKey = yyDollar[7].strSlice
			}
			if yyDollar[9].strSlices != nil {
				option.Property = yyDollar[9].strSlices
			}
			option.CompactType = yyDollar[10].str
			yyVAL.cmOption = option
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2644
		{
			yyVAL.indexType = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			validIndexType := map[string]struct{}{}
			validIndexType["text"] = struct{}{}
			validIndexType["field"] = struct{}{}
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				for _, indexType := range yyDollar[2].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for TSSTORE")
					}
				}
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2665
		{
			yyVAL.indexType = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2669
		{
			validIndexType := map[string]struct{}{}
			validIndexType["bloomfilter"] = struct{}{}
			validIndexType["bloomfilter_ip"] = struct{}{}
			validIndexType["minmax"] = struct{}{}
			validIndexType["text"] = struct{}{}
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				for _, indexType := range yyDollar[2].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for COLUMNSTORE")
					}
				}
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2687
		{
			indexType := strings.ToLower(yyDollar[2].str)
			if indexType != "timecluster" {
				yylex.Error("expect TIMECLUSTER for INDEXTYPE")
				return 1
			}
			indextype := &IndexType{
				types:               []string{indexType},
				lists:               [][]string{{"time"}},
				timeClusterDuration: yyDollar[4].tdur,
			}
			validIndexType := map[string]struct{}{}
			validIndexType["bloomfilter"] = struct{}{}
			validIndexType["bloomfilter_ip"] = struct{}{}
			validIndexType["minmax"] = struct{}{}
			if yyDollar[6].indexType == nil {
				yyVAL.indexType = indextype
			} else {
				for _, indexType := range yyDollar[6].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for COLUMNSTORE")
					}
				}
				indextype.types = append(indextype.types, yyDollar[6].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[6].indexType.lists...)
				yyVAL.indexType = indextype
			}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2717
		{
			yyVAL.strSlice = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			shardKey := yyDollar[2].strSlice
			sort.Strings(shardKey)
			yyVAL.strSlice = shardKey
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2728
		{
			yyVAL.int64 = 0
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.int64 = -1
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			if yyDollar[2].int64 == 0 {
				yylex.Error("syntax error: NUM OF SHARDS SHOULD LARGER THAN 0")
			}
			yyVAL.int64 = yyDollar[2].int64
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2744
		{
			yyVAL.str = "tsstore" // default engine type
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.str = "tsstore"
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.str = "columnstore"
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2759
		{
			yyVAL.strSlice = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2767
		{
			yyVAL.strSlice = nil
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2775
		{
			yyVAL.strSlices = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2783
		{
			yyVAL.str = "row"
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			compactionType := strings.ToLower(yyDollar[2].str)
			if compactionType != "row" && compactionType != "block" {
				yylex.Error("expect ROW or BLOCK for COMPACT type")
				return 1
			}
			yyVAL.str = compactionType
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			stmt := &CreateMeasurementStatement{
				Tags:   make(map[string]int32),
				Fields: make(map[string]int32),
			}
			for i := range yyDollar[2].fieldOptions {
				fType := yyDollar[2].fieldOptions[i].tagOrField
				if fType == "tag" {
					stmt.Tags[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Tag
				} else if fType == "field" {
					fieldType := strings.ToLower(yyDollar[2].fieldOptions[i].fieldType)
					fieldName := yyDollar[2].fieldOptions[i].fieldName
					if fieldType == "int64" {
						stmt.Fields[fieldName] = influx.Field_Type_Int
					} else if fieldType == "float64" {
						stmt.Fields[fieldName] = influx.Field_Type_Float
					} else if fieldType == "string" {
						stmt.Fields[fieldName] = influx.Field_Type_String
					} else if fieldType == "bool" {
						stmt.Fields[fieldName] = influx.Field_Type_Boolean
					} else {
						yylex.Error("expect FLOAT64, INT64, BOOL, STRING for column data type")
						return 1 // syntax error
					}
				}
			}
			yyVAL.stmt = stmt
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2827
		{
			yyVAL.stmt = nil
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			fields := []*fieldList{yyDollar[1].fieldOption}
			yyVAL.fieldOptions = append(fields, yyDollar[2].fieldOptions...)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.fieldOptions = []*fieldList{yyDollar[1].fieldOption}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  "string",
				tagOrField: "tag",
			}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.indexType = &IndexType{
				types: []string{yyDollar[1].str},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2892
		{
			yyVAL.indexType = &IndexType{
				types: []string{"field"},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			indextype := yyDollar[1].indexType
			if yyDollar[2].indexType != nil {
				indextype.types = append(indextype.types, yyDollar[2].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[2].indexType.lists...)
			}
			yyVAL.indexType = indextype
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2910
		{
			yyVAL.indexType = nil
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{

			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			shardType := strings.ToLower(yyDollar[2].str)
			if shardType != "hash" && shardType != "range" {
				yylex.Error("expect HASH or RANGE for TYPE")
				return 1
			}
			yyVAL.str = shardType
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = "hash"
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2948
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			m := yyDollar[1].strSlices
			if yyDollar[3].strSlices != nil {
				m[0] = append(m[0], yyDollar[3].strSlices[0]...)
				m[1] = append(m[1], yyDollar[3].strSlices[1]...)
			}
			yyVAL.strSlices = m
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2970
		{
			yyVAL.strSlices = yyDollar[2].strSlices
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2976
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {yyDollar[3].str}}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2980
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {fmt.Sprintf("%d", yyDollar[3].int64)}}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2984
		{
			yyVAL.strSlices = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = yyDollar[1].str
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3005
		{
			stmt := &DropShardStatement{}
			stmt.ID = uint64(yyDollar[3].int64)
			yyVAL.stmt = stmt
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3013
		{
			stmt := &SetPasswordUserStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3024
		{
			stmt := &ShowGrantsForUserStatement{}
			stmt.Name = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 370:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3032
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3044
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3055
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3067
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 374:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3081
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3093
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 376:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3104
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3116
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			stmt := &ShowShardsStatement{}
			yyVAL.stmt = stmt
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3135
		{
			stmt := &ShowShardsStatement{mstInfo: yyDollar[4].ment}
			yyVAL.stmt = stmt
		}
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3143
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3154
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			stmt := &ShowShardGroupsStatement{}
			yyVAL.stmt = stmt
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[3].str
			stmt.RpName = ""
			yyVAL.stmt = stmt
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3182
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[5].str
			stmt.RpName = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 385:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3192
		{
			stmt := &CreateContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
				Source:   yyDollar[9].stmt.(*SelectStatement),
			}
			if yyDollar[7].cqsp != nil {
				stmt.ResampleEvery = yyDollar[7].cqsp.ResampleEvery
				stmt.ResampleFor = yyDollar[7].cqsp.ResampleFor
			}
			yyVAL.stmt = stmt
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
			}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3213
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleFor: yyDollar[3].tdur,
			}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3219
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
				ResampleFor:   yyDollar[5].tdur,
			}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3226
		{
			yyVAL.cqsp = nil
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3232
		{
			yyVAL.stmt = &ShowContinuousQueriesStatement{}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3238
		{
			yyVAL.stmt = &DropContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
			}
		}
	case 392:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3246
		{
			stmt := yyDollar[9].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[4].str
			stmt.Ops = yyDollar[6].fields
			yyVAL.stmt = stmt
		}
	case 393:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:3253
		{
			stmt := yyDollar[11].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[6].str
			stmt.DbName = yyDollar[4].str
			stmt.Ops = yyDollar[8].fields
			yyVAL.stmt = stmt
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3261
		{
			stmt := yyDollar[7].stmt.(*CreateDownSampleStatement)
			stmt.Ops = yyDollar[4].fields
			yyVAL.stmt = stmt
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3269
		{
			yyVAL.stmt = &DropDownSampleStatement{
				RpName: yyDollar[4].str,
			}
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3275
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName: yyDollar[4].str,
				RpName: yyDollar[6].str,
			}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3282
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DropAll: true,
			}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3288
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName:  yyDollar[4].str,
				DropAll: true,
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3297
		{
			yyVAL.stmt = &ShowDownSampleStatement{}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3301
		{
			yyVAL.stmt = &ShowDownSampleStatement{
				DbName: yyDollar[4].str,
			}
		}
	case 401:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3309
		{
			yyVAL.stmt = &CreateDownSampleStatement{
				Duration:       yyDollar[2].tdur,
				SampleInterval: yyDollar[5].tdurs,
				TimeInterval:   yyDollar[9].tdurs,
			}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.tdurs = []time.Duration{yyDollar[1].tdur}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3323
		{
			yyVAL.tdurs = append([]time.Duration{yyDollar[1].tdur}, yyDollar[3].tdurs...)
		}
	case 404:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3330
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
				Delay: yyDollar[8].tdur,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3352
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3375
		{
			yyVAL.stmt = &ShowStreamsStatement{}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3379
		{
			yyVAL.stmt = &ShowStreamsStatement{Database: yyDollar[4].str}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3385
		{
			yyVAL.stmt = &DropStreamsStatement{Name: yyDollar[3].str}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3390
		{
			yyVAL.stmt = &ShowQueriesStatement{}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3395
		{
			yyVAL.stmt = &KillQueryStatement{QueryID: uint64(yyDollar[3].int64)}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3401
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3405
		{
			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.str = "ALL"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			yyVAL.str = "ANY"
		}
	case 415:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3421
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str, Destinations: yyDollar[10].strSlice, Mode: yyDollar[9].str}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3425
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: "", Destinations: yyDollar[8].strSlice, Mode: yyDollar[7].str}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3431
		{
			yyVAL.stmt = &ShowSubscriptionsStatement{}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3437
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: "", RetentionPolicy: ""}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3441
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3445
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3449
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3455
		{
			stmt := &ShowConfigsStatement{}
			yyVAL.stmt = stmt
		}
	case 423:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3462
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3470
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].int64
			yyVAL.stmt = stmt
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3478
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].float64
			yyVAL.stmt = stmt
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3486
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3494
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3504
		{
			stmt := &ShowClusterStatement{}
			stmt.NodeID = 0
			yyVAL.stmt = stmt
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3510
		{
			stmt := &ShowClusterStatement{}
			stmt.NodeID = 0
			if strings.ToLower(yyDollar[4].str) == "nodetype" {
				stmt.NodeType = yyDollar[6].str
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3521
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodeid" {
				stmt.NodeID = yyDollar[6].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 431:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3531
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodeid" {
				stmt.NodeID = yyDollar[6].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			if strings.ToLower(yyDollar[8].str) == "nodetype" {
				stmt.NodeType = yyDollar[10].str
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 432:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3546
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodetype" {
				stmt.NodeType = yyDollar[6].str
			} else {
				yylex.Error("Invalid where clause")
			}
			if strings.ToLower(yyDollar[8].str) == "nodeid" {
				stmt.NodeID = yyDollar[10].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	}
	goto yystack /* stack new state and value */
}
