// Code generated by tmpl; DO NOT EDIT.
// https://github.com/benbjohnson/tmpl
//
// Source: handlers.go.tmpl

// Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package handler

import (
	"github.com/openGemini/openGemini/lib/codec"
	"github.com/openGemini/openGemini/lib/errno"
	"github.com/openGemini/openGemini/lib/msgservice"
)

func NewHandler(typ uint8) RPCHandler {
	switch typ {
	case msgservice.SeriesKeysRequestMessage:
		return &SeriesKeys{}
	case msgservice.SeriesExactCardinalityRequestMessage:
		return &SeriesExactCardinality{}
	case msgservice.SeriesCardinalityRequestMessage:
		return &SeriesCardinality{}
	case msgservice.ShowTagValuesRequestMessage:
		return &ShowTagValues{}
	case msgservice.ShowTagValuesCardinalityRequestMessage:
		return &ShowTagValuesCardinality{}
	case msgservice.GetShardSplitPointsRequestMessage:
		return &GetShardSplitPoints{}
	case msgservice.DeleteRequestMessage:
		return &Delete{}
	case msgservice.CreateDataBaseRequestMessage:
		return &CreateDataBase{}
	case msgservice.ShowQueriesRequestMessage:
		return &ShowQueries{}
	case msgservice.KillQueryRequestMessage:
		return &KillQuery{}
	case msgservice.ShowTagKeysRequestMessage:
		return &ShowTagKeys{}
	case msgservice.RaftMessagesRequestMessage:
		return &RaftMessages{}
	case msgservice.DropSeriesRequestMessage:
		return &DropSeries{}
	default:
		return nil
	}
}

type SeriesKeys struct {
	BaseHandler

	req *msgservice.SeriesKeysRequest
	rsp *msgservice.SeriesKeysResponse
}

func (h *SeriesKeys) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.SeriesKeysResponse{}
	req, ok := msg.(*msgservice.SeriesKeysRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.SeriesKeysRequest", msg)
	}
	h.req = req
	return nil
}

type SeriesExactCardinality struct {
	BaseHandler

	req *msgservice.SeriesExactCardinalityRequest
	rsp *msgservice.SeriesExactCardinalityResponse
}

func (h *SeriesExactCardinality) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.SeriesExactCardinalityResponse{}
	req, ok := msg.(*msgservice.SeriesExactCardinalityRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.SeriesExactCardinalityRequest", msg)
	}
	h.req = req
	return nil
}

type SeriesCardinality struct {
	BaseHandler

	req *msgservice.SeriesCardinalityRequest
	rsp *msgservice.SeriesCardinalityResponse
}

func (h *SeriesCardinality) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.SeriesCardinalityResponse{}
	req, ok := msg.(*msgservice.SeriesCardinalityRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.SeriesCardinalityRequest", msg)
	}
	h.req = req
	return nil
}

type ShowTagValues struct {
	BaseHandler

	req *msgservice.ShowTagValuesRequest
	rsp *msgservice.ShowTagValuesResponse
}

func (h *ShowTagValues) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.ShowTagValuesResponse{}
	req, ok := msg.(*msgservice.ShowTagValuesRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.ShowTagValuesRequest", msg)
	}
	h.req = req
	return nil
}

type ShowTagValuesCardinality struct {
	BaseHandler

	req *msgservice.ShowTagValuesCardinalityRequest
	rsp *msgservice.ShowTagValuesCardinalityResponse
}

func (h *ShowTagValuesCardinality) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.ShowTagValuesCardinalityResponse{}
	req, ok := msg.(*msgservice.ShowTagValuesCardinalityRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.ShowTagValuesCardinalityRequest", msg)
	}
	h.req = req
	return nil
}

type GetShardSplitPoints struct {
	BaseHandler

	req *msgservice.GetShardSplitPointsRequest
	rsp *msgservice.GetShardSplitPointsResponse
}

func (h *GetShardSplitPoints) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.GetShardSplitPointsResponse{}
	req, ok := msg.(*msgservice.GetShardSplitPointsRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.GetShardSplitPointsRequest", msg)
	}
	h.req = req
	return nil
}

type Delete struct {
	BaseHandler

	req *msgservice.DeleteRequest
	rsp *msgservice.DeleteResponse
}

func (h *Delete) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.DeleteResponse{}
	req, ok := msg.(*msgservice.DeleteRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.DeleteRequest", msg)
	}
	h.req = req
	return nil
}

type CreateDataBase struct {
	BaseHandler

	req *msgservice.CreateDataBaseRequest
	rsp *msgservice.CreateDataBaseResponse
}

func (h *CreateDataBase) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.CreateDataBaseResponse{}
	req, ok := msg.(*msgservice.CreateDataBaseRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.CreateDataBaseRequest", msg)
	}
	h.req = req
	return nil
}

type ShowQueries struct {
	BaseHandler

	req *msgservice.ShowQueriesRequest
	rsp *msgservice.ShowQueriesResponse
}

func (h *ShowQueries) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.ShowQueriesResponse{}
	req, ok := msg.(*msgservice.ShowQueriesRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.ShowQueriesRequest", msg)
	}
	h.req = req
	return nil
}

type KillQuery struct {
	BaseHandler

	req *msgservice.KillQueryRequest
	rsp *msgservice.KillQueryResponse
}

func (h *KillQuery) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.KillQueryResponse{}
	req, ok := msg.(*msgservice.KillQueryRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.KillQueryRequest", msg)
	}
	h.req = req
	return nil
}

type ShowTagKeys struct {
	BaseHandler

	req *msgservice.ShowTagKeysRequest
	rsp *msgservice.ShowTagKeysResponse
}

func (h *ShowTagKeys) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.ShowTagKeysResponse{}
	req, ok := msg.(*msgservice.ShowTagKeysRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.ShowTagKeysRequest", msg)
	}
	h.req = req
	return nil
}

type RaftMessages struct {
	BaseHandler

	req *msgservice.RaftMessagesRequest
	rsp *msgservice.RaftMessagesResponse
}

func (h *RaftMessages) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.RaftMessagesResponse{}
	req, ok := msg.(*msgservice.RaftMessagesRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.RaftMessagesRequest", msg)
	}
	h.req = req
	return nil
}

type DropSeries struct {
	BaseHandler

	req *msgservice.DropSeriesRequest
	rsp *msgservice.DropSeriesResponse
}

func (h *DropSeries) SetMessage(msg codec.BinaryCodec) error {
	h.rsp = &msgservice.DropSeriesResponse{}
	req, ok := msg.(*msgservice.DropSeriesRequest)
	if !ok {
		return errno.NewInvalidTypeError("*msgservice.DropSeriesRequest", msg)
	}
	h.req = req
	return nil
}
